<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jellyyoung&#39;s Blog</title>
  <subtitle>一只不会编程还想做数据科学的coder</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yaodong.ml/"/>
  <updated>2017-03-14T06:53:14.794Z</updated>
  <id>http://yaodong.ml/</id>
  
  <author>
    <name>摇摇果冻</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不忘初心，未来可期——2017启笔</title>
    <link href="http://yaodong.ml/writings/%E4%B8%8D%E5%BF%98%E5%88%9D%E5%BF%83%EF%BC%8C%E6%9C%AA%E6%9D%A5%E5%8F%AF%E6%9C%9F%E2%80%94%E2%80%942017%E5%90%AF%E7%AC%94.html"/>
    <id>http://yaodong.ml/writings/不忘初心，未来可期——2017启笔.html</id>
    <published>2017-01-01T14:39:05.000Z</published>
    <updated>2017-03-14T06:53:14.794Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;博客好久没更了，感觉一直都在碌碌无为地忙碌着。毫无准备地跨进了2017，哦，本命年。坐在这里也不知道该写点什么，过去的一年里有遗憾，有后悔，一切都回不去了。<br>&emsp;&emsp;2017，不忘初心，不辜负。<br><a id="more"></a><br>&emsp;&emsp;总感觉新年和圣诞节是不一样的。圣诞节是西方的一个宗教节日，国人大概只是给狂欢冠以堂皇之名吧。一直在寻找一个时间节点，去重启自己的生活节奏，1月1日新年伊始，这个time point不能再合适。嗯，过往的二十年里一直都是这样拖延和给自己找借口，大多杰出的人总能从当下开始，而我，总要拖到下一个自己设定的时间点。<br>&emsp;&emsp;不知道习惯性三分钟热度的自己，十天半个月之后会不会已经忘了自己写过这篇博客，忘记博客中吹过的牛逼。或者，未来的某个时间，觉得这篇博客在打脸，偷偷地删掉博客也是有可能的哦。<br>&emsp;&emsp;过去这一年都干了什么？脑海里好像已经没有太多值得回忆的片段，过去的一年里，没有上进心，没有太多生活的动力。似乎还没有从保研的那一年的生活节奏中走出来。<strong>保研后遗症好严重，嗯，把自己懒和不努力的锅甩给了保研</strong>。<br>&emsp;&emsp;仔细想来，能第一时间浮现在脑海的应该也是大喜大悲过的吧。1月份时研一考试周天天泡纪忠楼206复习看书，期末考试没考好，好几门课的成绩渣到爆，后来因为学位课成绩很差而不开心好一阵子。从研一下开始已经决意脱离通信，入了计算机的坑。研一下天天看教程学Java，现在撸代码的速度已经可以和单身贵族的手速相媲美了。研一时的冲动和不成熟导致跟女朋友分手，之后的整个研一下都在浑浑噩噩中度过，那段时间算是读研以来最灰暗的日子了，从那之后研一剩下的几个月都发生了什么，我都没有太多记忆了。从那时才知道网易云音乐每首歌的评论列表都是一个个伤心的故事，也一天天地单曲循环<code>我不愿让你一个人</code>、<code>只是没有如果</code>、<code>走着走着就散了</code>；也在从那时开始养成了一个人打篮球的习惯，到现在还能保持空位投篮60%以上的命中率。校运动会时跟范特、柳旭一起组队代表学院参加了1分钟投篮大赛，也是从那时开始，三人变老铁。大概是因为研一下跟大师姐经常一起上课吧，上课经常性跑神，大师姐会经常给灌鸡汤，就这样后来和大师姐也成为了很好的朋友。感谢你们一直都在，昨天还一起跨年，特哥，旭哥，大师姐，新年快乐！<br>&emsp;&emsp;研一结束时搬回四牌楼校区，在九龙湖校区的一年基本没有留下太多回忆，更多的是不甘。下半年的生活似乎也没有太多波澜了：每个月按时给导师交学习报告、刷算法刷leetcode、看看机器学习知识、水一水比赛。暑假基本没回家，7月份主要在刷数据结构和算法，用Github+Hexo搭建了博客；8月份主要学了机器学习的理论基础和Java Web。9月中旬左右被导师派往苏州出差到现在。平时除了做导师的通信项目之外，一天天都在瞎折腾，机器学习、算法、Java、Python、数据比赛、Linux、网络爬虫…，也没学明白个所以然来。研二上这半年的黄金时间又被自己霍霍没了，WTF。12月份把微信朋友圈停用了，转向<a href="http://weibo.com/u/2685489433" target="_blank" rel="external">微博</a>的怀抱。会不会，朋友圈是下一个QQ空间，微博又是下一个朋友圈…<br>&emsp;&emsp;现在总结来，在过去的一年里，应该是在不断交学费的过程中更成熟了吧：不再高傲自大；多一点耐心，不要对自己爱的人发脾气；做决定先考虑后果，任何时候不要把事情搞成无法挽回的局面。</p>
<hr>
<p>&emsp;&emsp;今天是2017年第一天，新的一年祝看到博客的大家天天好心情，校招季拿到心仪的offer！<br>&emsp;&emsp;深夜坐在电脑前写这篇博客，依然会有20多年一如既往的那种“放假回家我要把书都带上，回家好好学习”的既视感。新的一年，总该给自己定几个小目标，哪怕实现不了装装逼也是好的。<br>&emsp;&emsp;背景音乐是<code>who is fancy</code>的<strong><code>goodbye</code></strong>，音乐荒，求推荐好听的歌曲，语种不限。<br>&emsp;&emsp;晚安！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=30706076&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;博客好久没更了，感觉一直都在碌碌无为地忙碌着。毫无准备地跨进了2017，哦，本命年。坐在这里也不知道该写点什么，过去的一年里有遗憾，有后悔，一切都回不去了。&lt;br&gt;&amp;emsp;&amp;emsp;2017，不忘初心，不辜负。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yaodong.ml/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu安装软件过程记录</title>
    <link href="http://yaodong.ml/articles/Ubuntu%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95.html"/>
    <id>http://yaodong.ml/articles/Ubuntu安装软件过程记录.html</id>
    <published>2016-11-23T07:31:38.000Z</published>
    <updated>2016-11-23T07:34:15.868Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文记录Ubuntu系统的软件安装历程。<br><a id="more"></a></p>
<p>&emsp;&emsp;电脑型号：美版 Y50-70<br>&emsp;&emsp;是否双系统：是<br>&emsp;&emsp;WIndow系统版本：Windows 8.1专业版64位<br>&emsp;&emsp;Linux系统版本：Ubuntu 16.04 LTS 64位</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>&emsp;&emsp;Git是分布式版本控制系统，程序员必备。</p>
<ol>
<li>检查系统是否安装git：在命令行窗口输入<code>git</code>，如果系统提示<code>The Program &#39;git&#39; is currently not installed.</code>，则说明系统没有安装<code>git</code>。</li>
<li><p>安装Git：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
</li>
<li><p>安装完成后，检查是否安装成功</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
</li>
<li><p>成功安装<code>Git</code>后，配置用户名和Email。配置完成后，在用户文件夹下会自动生成<code>.gitconfig</code>文件。若要查看<code>Git</code>的全局配置信息，在控制台输入<code>git config -l</code>即可。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"YourName"</span></div><div class="line">git config --global user.email <span class="string">"username@email.com"</span></div></pre></td></tr></table></figure>
</li>
<li><p>创建用于验证的公钥。<code>Git</code>通过SSH的方式访问远程资源库，因此需要在本地创建验证公钥。创建公钥成功后，在<code>~/.ssh/</code>目录下会生成<code>id_rsa.pub</code>文件。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -C <span class="string">'username@email.com'</span> -t rsa</div><div class="line">ssh -v git@github.com</div></pre></td></tr></table></figure>
</li>
<li><p>上传公钥。在Github主界面点击右上角的<code>Account Settings</code>，选择<code>SSH Public Keys</code> ，选中<code>添加</code>，Title推荐以电脑用户名命名，Key的内容拷贝自<code>~/.ssh/id_rsa.pub</code>中的内容。上传公钥完成后，使用<code>ssh -v git@github.com</code>进行测试。</p>
</li>
</ol>
<h3 id="安装Adobe-Flash-Player"><a href="#安装Adobe-Flash-Player" class="headerlink" title="安装Adobe Flash Player"></a>安装Adobe Flash Player</h3><p>&emsp;&emsp;Ubuntu系统自带Firefox浏览器，但是打开视频网站时提示需要安装flash插件。使用下列指令安装flash插件后，要重启Firefox浏览器才能生效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install flashplugin-installer</div></pre></td></tr></table></figure></p>
<h3 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h3><p>&emsp;&emsp;shadowsocks的客户端使用<code>shadowsocks-qt5</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></p>
<h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/sublime-text-3 <span class="comment"># 添加sublime text 3的仓库</span></div><div class="line">sudo apt-get update <span class="comment"># 更新软件库</span></div><div class="line">sudo apt-get install sublime-text-installer <span class="comment"># 安装Sublime Text 3</span></div></pre></td></tr></table></figure>
<h3 id="安装Xgboost"><a href="#安装Xgboost" class="headerlink" title="安装Xgboost"></a>安装Xgboost</h3><p>&emsp;&emsp;Xgbsoost不再过多介绍，可参考<a href="https://github.com/dmlc/xgboost" target="_blank" rel="external">Github库</a>和<a href="https://xgboost.readthedocs.io/en/latest/" target="_blank" rel="external">官方文档</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/username/Github</div><div class="line">git <span class="built_in">clone</span> --recursive https://github.com/dmlc/xgboost</div><div class="line"><span class="built_in">cd</span> ./xgboost</div><div class="line">make -j4 <span class="comment"># 或者只使用make亦可</span></div><div class="line"><span class="built_in">cd</span> xgboost/python-package/</div><div class="line">python setup.py install <span class="comment"># 不能使用sudo</span></div></pre></td></tr></table></figure></p>
<h3 id="安装网易云音乐"><a href="#安装网易云音乐" class="headerlink" title="安装网易云音乐"></a>安装网易云音乐</h3><p>&emsp;&emsp;去<a href="http://music.163.com/#/download" target="_blank" rel="external">官网</a>下载<code>NetEaseMusic.deb</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/username/Download/</div><div class="line">sudo dpkg -i netease_music.deb</div><div class="line">sudo apt-get <span class="_">-f</span> install</div><div class="line">sudo dpkg -i netease_music.deb</div></pre></td></tr></table></figure></p>
<h3 id="安装wps-office"><a href="#安装wps-office" class="headerlink" title="安装wps office"></a>安装wps office</h3><p>&emsp;&emsp;下载<code>wps_office.deb</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/username/Download/</div><div class="line">sudo dpkg -i wps_office.deb</div><div class="line">sudo apt-get <span class="_">-f</span> install</div><div class="line">sudo dpkg -i wps_office.deb</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;安装完成后，提示“系统确实字体：Wingdings、Wingdings 2、Wingdings 3、…”。解决办法：下载缺失字体，解压到<code>/home/username/.fonts</code>和<code>/root/.fonts</code>目录下，重启程序即可。</p>
<h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><ol>
<li>当前用户下的环境变量：<code>/home/username/.bashrc</code></li>
<li><code>root</code>用户的环境变量位置：<code>/root/.bashrc</code></li>
<li>每次修改环境变量配置后，都要使用<code>source /home/username/.bashrc</code>或<code>/root/.bashrc</code>指令更新环境变量</li>
</ol>
<h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><ol>
<li>下载源文件<code>jdk-8uxx-linux-x64.tar.gz</code></li>
<li><p>找到源文件位置，将<code>jdk</code>解压到指定文件夹下</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf jdk-8uxx-linux-x64.tar.gz /opt/java</div></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量。当前用户下的环境变量文件位置为<code>/home/username/.bashrc</code>， <code>root</code>用户的环境变量文件位置为<code>/root/.bashrc</code></p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/opt/java/jdk1.8.0_xx</div><div class="line"><span class="built_in">export</span> JRE_HOME=/opt/java/jdk_1.8.0_xx/jre</div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</div></pre></td></tr></table></figure>
</li>
<li><p>更新环境变量</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /home/username/.bashrc</div><div class="line"><span class="built_in">source</span> /root/.bashrc</div></pre></td></tr></table></figure>
</li>
<li><p>检查Java是否安装成功，</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java --version</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装Scala"><a href="#安装Scala" class="headerlink" title="安装Scala"></a>安装Scala</h3><p>&emsp;&emsp;Ubuntu系统安装<code>Scala</code>的过程与安装<code>Java</code>的过程相似，可参考前文的<code>Java</code>安装教程。</p>
<h3 id="安装Eclipse"><a href="#安装Eclipse" class="headerlink" title="安装Eclipse"></a>安装Eclipse</h3><ol>
<li>Eclipse官网<a href="http://www.eclipse.org/downloads/" target="_blank" rel="external">地址</a>，下载<code>eclipse-java-mars-linux-gtk-x86_64.tar.gz</code></li>
<li><p>将源文件解压到指定文件夹下</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/username/</div><div class="line">sudo tar -zxvf eclipse-java-mars-linux-gtk-x86_64.tar.gz /opt/</div></pre></td></tr></table></figure>
</li>
<li><p>要想在控制台下直接启动Eclipse，则将Eclipse启动脚本的目录加入到环境变量文件<code>.bashrc</code>即可。</p>
</li>
</ol>
<h3 id="安装Matlab"><a href="#安装Matlab" class="headerlink" title="安装Matlab"></a>安装Matlab</h3><p>&emsp;&emsp;为防止出错，应在<code>root</code>用户下安装，本安装教程假设用户打开matlab安装界面后可以自主安装，关于Matlab的激活本教程不做赘述。获取Linux版的Matlab镜像：<code>Matlab-R2015a-linux-x64.iso</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo mount -o loop /home/username/Software/Matlab-R2015a-linux-x64.iso /nmt/</div><div class="line"><span class="built_in">cd</span> /mnt/matlab</div><div class="line">sudo ./install</div><div class="line">sudo umount /mnt/matlab</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本文记录Ubuntu系统的软件安装历程。&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yaodong.ml/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="ubuntu" scheme="http://yaodong.ml/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>17个适合练手的数据科学项目数据集</title>
    <link href="http://yaodong.ml/articles/17%E4%B8%AA%E9%80%82%E5%90%88%E7%BB%83%E6%89%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E9%9B%86.html"/>
    <id>http://yaodong.ml/articles/17个适合练手的数据科学项目数据集.html</id>
    <published>2016-11-15T17:03:40.000Z</published>
    <updated>2016-11-15T17:08:42.773Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文翻译自Analytics Vidhya网站的一篇文章，<a href="https://www.analyticsvidhya.com/blog/2016/10/17-ultimate-data-science-projects-to-boost-your-knowledge-and-skills/" target="_blank" rel="external">17 Ultimate Data Science Projects To Boost Your Knowledge and Skills</a>，有翻译不准的地方还请指正。<br><a id="more"></a><br>&emsp;&emsp;数据科学项目可以为你的机器学习生涯开辟一条康庄大道，通过它们你不仅可以提升实战经验，也可以让你的简历更加吸引人。相应的实战经验在找工作过程中会很加分，而大部分人缺少的就是这一点。<br>&emsp;&emsp;本博文列出来自不同领域、不同量级的数据集来满足机器学习实战的需求。<br>&emsp;&emsp;为了适应具有不同基础的读者的需求，本博文把数据集划分为三个等级：<br>&emsp;&emsp;<strong>初级</strong>：该级别的数据较好处理，不需要太过复杂的数据科学技术。只需要基本的回归或者分类算法就能处理，这些方法在网上也有足够多的免费教程。本文也将提供一些教程来帮助你起步。<br>&emsp;&emsp;<strong>中级</strong>：这个级别有一定挑战性，数据集的量相对较大，而且需要一些模式识别方面的技能。同样，特征工程也是必要技能之一。处理这些数据你可以使用所有现有的机器学习技术。<br>&emsp;&emsp;<strong>高级</strong>：这个级别适合那些对于神经网络、深度学习和推荐系统等已有了解的人们。集合中的特征往往是高维数据，处理它们可能需要一些富有创造性的方法和技巧。</p>
<h3 id="数据集概览"><a href="#数据集概览" class="headerlink" title="数据集概览"></a>数据集概览</h3><h4 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h4><ul>
<li>Iris Data</li>
<li>Titanic Data</li>
<li>Loan Prediction Data</li>
<li>Bigmart Sales Data</li>
<li>Boston Housing Data</li>
</ul>
<h4 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h4><ul>
<li>Human Activity Recognition Data</li>
<li>Black Friday Data</li>
<li>Siam Competition Data</li>
<li>Trip History Data</li>
<li>Million Song Data</li>
<li>Census Income Data</li>
<li>Movie Lens Data</li>
</ul>
<h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><ul>
<li>Identify your Digits</li>
<li>Yelp Data</li>
<li>ImageNet Data</li>
<li>KDD Cup 1998</li>
<li>Chicago Crime Data</li>
</ul>
<h3 id="初级水平数据集"><a href="#初级水平数据集" class="headerlink" title="初级水平数据集"></a>初级水平数据集</h3><h4 id="1-Iris-Data-Set（鸢尾花）"><a href="#1-Iris-Data-Set（鸢尾花）" class="headerlink" title="1. Iris Data Set（鸢尾花）"></a>1. Iris Data Set（鸢尾花）</h4><p>&emsp;&emsp;这可能是模式识别领域最入门的、资源最丰富的数据集。学习分类技术没有比iris数据集更简单的了。如果你刚刚开始接触数据科学，这就是你开始的地方。里面只包含了150行4列的数据。<br>&emsp;&emsp;<strong>问题</strong>: 根据已有的特征给花分类。<br>&emsp;&emsp;<a href="https://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="external">Iris数据集</a><br>&emsp;&emsp;<a href="http://www.slideshare.net/thoi_gian/iris-data-analysis-with-r" target="_blank" rel="external">教程</a></p>
<h4 id="2-Titanic-Data-Set（泰坦尼克之灾）"><a href="#2-Titanic-Data-Set（泰坦尼克之灾）" class="headerlink" title="2. Titanic Data Set（泰坦尼克之灾）"></a>2. Titanic Data Set（泰坦尼克之灾）</h4><p>&emsp;&emsp;这是数据科学社群里另一个在全世界都被经常引用的数据集。在一些教程的指导下，这个项目应该可以给你足够的动力继续在数据科学领域深入下去。这个数据集有足够的空间去支持一些疯狂的想法！只要你合理的混合变量。这个数据集有891行12列。<br>&emsp;&emsp;<strong>问题</strong>：预测泰坦尼克上的乘客是否能存活。<br>&emsp;&emsp;<a href="https://www.kaggle.com/c/titanic" target="_blank" rel="external">Titanic数据集</a><br>&emsp;&emsp;<a href="http://trevorstephens.com/kaggle-titanic-tutorial/getting-started-with-r/" target="_blank" rel="external">教程</a></p>
<h4 id="3-Loan-Prediction-Data-Set（借贷预测）"><a href="#3-Loan-Prediction-Data-Set（借贷预测）" class="headerlink" title="3. Loan Prediction Data Set（借贷预测）"></a>3. Loan Prediction Data Set（借贷预测）</h4><p>&emsp;&emsp;在所有的行业里，保险业是运用分析和数据科学最多的领域。这个数据集将会让你充分体验到处理保险公司的数据是什么感觉。包括有哪些挑战，有哪些策略被用到，哪些变量会影响到结果等等。这是一个分类问题。这个数据集包含615行13列。<br>&emsp;&emsp;<strong>问题</strong>: 预测一项贷款是否会被批准。<br>&emsp;&emsp;<a href="https://datahack.analyticsvidhya.com/contest/practice-problem-loan-prediction-iii/" target="_blank" rel="external">数据集</a><br>&emsp;&emsp;<a href="https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/" target="_blank" rel="external">教程</a></p>
<h4 id="4-Bigmart-Sales-Data-Set（超市销量）"><a href="#4-Bigmart-Sales-Data-Set（超市销量）" class="headerlink" title="4. Bigmart Sales Data Set（超市销量）"></a>4. Bigmart Sales Data Set（超市销量）</h4><p>&emsp;&emsp;零售业是另一个充分利用分析技术来优化商业流程的行业。一些像商品放置，库存管理，定制供应，商品捆绑的任务，我们可以用数据科学巧妙地处理。正如名字所说，里面包含了商店的交易数据。这是一个回归问题。数据包含8523行12列。<br>&emsp;&emsp;<strong>问题</strong>: 预测销售。<br>&emsp;&emsp;<a href="https://datahack.analyticsvidhya.com/contest/practice-problem-big-mart-sales-iii/" target="_blank" rel="external">数据集</a><br>&emsp;&emsp;<a href="https://www.analyticsvidhya.com/blog/2016/02/bigmart-sales-solution-top-20/" target="_blank" rel="external">教程</a></p>
<h4 id="5-Boston-Housing-Data-Set（波士顿房价）"><a href="#5-Boston-Housing-Data-Set（波士顿房价）" class="headerlink" title="5. Boston Housing Data Set（波士顿房价）"></a>5. Boston Housing Data Set（波士顿房价）</h4><p>&emsp;&emsp;该数据集也是模式识别文献中的典型数据集，该数据集得名是因为波士顿的房地产行业，同时它也是一个回归问题。该数据集共有14列8506行。<br>典型问题：预测房屋售价的中间值。<br>&emsp;&emsp;<strong>问题</strong>: 预测业主拥有的房屋的中位数。<br>&emsp;&emsp;<a href="http://archive.ics.uci.edu/ml/datasets/Housing" target="_blank" rel="external">数据集</a><br>&emsp;&emsp;<a href="https://www.analyticsvidhya.com/blog/2015/11/started-machine-learning-ms-excel-xl-miner/" target="_blank" rel="external">教程</a></p>
<h3 id="中级水平数据集"><a href="#中级水平数据集" class="headerlink" title="中级水平数据集"></a>中级水平数据集</h3><h4 id="1-Human-Activity-Recognition（人类活动预测）"><a href="#1-Human-Activity-Recognition（人类活动预测）" class="headerlink" title="1. Human Activity Recognition（人类活动预测）"></a>1. Human Activity Recognition（人类活动预测）</h4><p>&emsp;&emsp;这项数据集是由装备了嵌入式惯性传感器的智能手机采集的30个人体实验对象记录所构成。许多机器学习课程用这个数据集作为学生的练习项目。这是一个多元分类问题。数据集包含10299行561列。<br>&emsp;&emsp;<strong>问题</strong>: 预测人类的活动范畴。<br>&emsp;&emsp;<a href="http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones" target="_blank" rel="external">数据集</a></p>
<h4 id="2-Black-Friday-Data-Set（黑色星期五）"><a href="#2-Black-Friday-Data-Set（黑色星期五）" class="headerlink" title="2. Black Friday Data Set（黑色星期五）"></a>2. Black Friday Data Set（黑色星期五）</h4><p>&emsp;&emsp;这是一家零售企业的交易数据，可以锻炼你在特征工程方面的技能，同时分析他也需要你对消费行为的理解。适用于做回归分析。数据集包含550069行12列。<br>&emsp;&emsp;问题: 预测消费金额。<br>&emsp;&emsp;<a href="https://datahack.analyticsvidhya.com/contest/black-friday/" target="_blank" rel="external">数据集</a></p>
<h4 id="3-Text-Mining-Data-Set（文本挖掘）"><a href="#3-Text-Mining-Data-Set（文本挖掘）" class="headerlink" title="3. Text Mining Data Set（文本挖掘）"></a>3. Text Mining Data Set（文本挖掘）</h4><p>&emsp;&emsp;这个数据集源自2007年的暹罗大赛。该数据集包含航空公司飞行数据中关于航空安全问题的报告，属于多标记分类的高维问题。数据集包含有30438列21519行。<br>&emsp;&emsp;<strong>问题</strong>: 根据标签给文档分类。<br>&emsp;&emsp;<a href="http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html#siam-competition2007" target="_blank" rel="external">数据集</a><br>&emsp;&emsp;<a href="https://catalog.data.gov/dataset/siam-2007-text-mining-competition-dataset/resource/794f14ae-8135-41d2-88c8-86bf8fad9cf6/proxy" target="_blank" rel="external">教程</a></p>
<h4 id="4-Trip-History-Data-Set（旅行历史）"><a href="#4-Trip-History-Data-Set（旅行历史）" class="headerlink" title="4. Trip History Data Set（旅行历史）"></a>4. Trip History Data Set（旅行历史）</h4><p>&emsp;&emsp;这个数据集来自美国的一个自行车分享服务。本数据集能帮助你你练习专业的数据清理技能。数据集提供了从2014第四季度以来的数据。每一个文件都有7列。<br>&emsp;&emsp;<strong>问题</strong>: 预测用户的类别。<br>&emsp;&emsp;<a href="https://www.capitalbikeshare.com/trip-history-data" target="_blank" rel="external">数据集</a></p>
<h4 id="5-Million-Song-Data-Set（音乐数据）"><a href="#5-Million-Song-Data-Set（音乐数据）" class="headerlink" title="5. Million Song Data Set（音乐数据）"></a>5. Million Song Data Set（音乐数据）</h4><p>&emsp;&emsp;该数据集是一个回归问题。它包括515345个样本，每个样本有90个变量。不过，这还只是百万首歌曲数据库中的一个小子集。<br>&emsp;&emsp;<strong>问题</strong>：预测歌曲的最佳发布时间<br>&emsp;&emsp;<a href="http://archive.ics.uci.edu/ml/datasets/YearPredictionMSD" target="_blank" rel="external">数据集</a></p>
<h4 id="6-Census-Income-Data-Set"><a href="#6-Census-Income-Data-Set" class="headerlink" title="6. Census Income Data Set"></a>6. Census Income Data Set</h4><p>&emsp;&emsp;这是一个经典的一个非平衡分类机器学习问题。机器学习现在正被广泛的应用于解决非平衡问题，例如癌症检测，诈骗检测等等。这个数据集包含了48842行14列。作为指导，你可以参考<a href="https://www.analyticsvidhya.com/blog/2016/09/this-machine-learning-project-on-imbalanced-data-can-add-value-to-your-resume/" target="_blank" rel="external">非平衡数据项目</a>。<br>&emsp;&emsp;<strong>问题</strong>: 预测美国人口的收入等级。<br>&emsp;&emsp;<a href="http://archive.ics.uci.edu/ml/machine-learning-databases/census-income-mld/" target="_blank" rel="external">数据集</a></p>
<h4 id="7-Movie-Lens-Data-Set-（电影推荐）"><a href="#7-Movie-Lens-Data-Set-（电影推荐）" class="headerlink" title="7. Movie Lens Data Set （电影推荐）"></a>7. Movie Lens Data Set （电影推荐）</h4><p>&emsp;&emsp;这个数据集让你建立一个推荐系统。这是数据科学领域最受欢迎的数据集之一。具有不同维度的版本。这里我选择了一个数据量相对较小的版本，包括了6000用户对4000部电影的1百万条评分记录。<br>&emsp;&emsp;<strong>问题</strong>: 给用户推荐新电影。<br>&emsp;&emsp;<a href="http://grouplens.org/datasets/movielens/1m/" target="_blank" rel="external">数据集</a></p>
<h3 id="高级水平数据集"><a href="#高级水平数据集" class="headerlink" title="高级水平数据集"></a>高级水平数据集</h3><h4 id="1-Identify-your-Digits-Data-Set"><a href="#1-Identify-your-Digits-Data-Set" class="headerlink" title="1. Identify your Digits Data Set"></a>1. Identify your Digits Data Set</h4><p>&emsp;&emsp;这个数据集让你学习，分析和识别图像里的元素。这正是你的相机如何检测你的脸部的，利用图像识别。现在到你建立并测试这个技术了。这是一个图像识别问题。这个数据集包含7000张28×28大小的图片，一共31MB。<br>&emsp;&emsp;<strong>问题</strong>: 识别照片中的元素。<br>&emsp;&emsp;<a href="https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/" target="_blank" rel="external">数据集</a></p>
<h4 id="2-Yelp-Data-Set（Yelp数据集）"><a href="#2-Yelp-Data-Set（Yelp数据集）" class="headerlink" title="2. Yelp Data Set（Yelp数据集）"></a>2. Yelp Data Set（Yelp数据集）</h4><p>&emsp;&emsp;这个数据集是Yelp数据挑战赛第8轮的问题之一。它包含了将近200000个图像，存储在大小接近2GB的3个json文件中。这些图像包括4个国家10个城市的本土商业信息，你将要使用季节分析、文化分析、文本挖掘、社会图挖掘等技术来处理这个数据集。<br>&emsp;&emsp;<strong>问题</strong>: 从图中挖掘信息<br>&emsp;&emsp;<a href="https://www.yelp.com/dataset_challenge" target="_blank" rel="external">数据集</a></p>
<h4 id="3-Image-Net-Data-Set（ImageNet数据集）"><a href="#3-Image-Net-Data-Set（ImageNet数据集）" class="headerlink" title="3. Image Net Data Set（ImageNet数据集）"></a>3. Image Net Data Set（ImageNet数据集）</h4><p>&emsp;&emsp;这个数据集可以用来做对象识别，定位，分类和屏幕解析等问题。所有图像都可以免费得到。你可以搜索任一种类的图像来做项目。目前，这个图像引擎有14197122个不同尺寸的图像，总计140GB。<br>&emsp;&emsp;<strong>问题</strong>: 取决于你下载的图像类型<br>&emsp;&emsp;<a href="http://image-net.org/download-imageurls" target="_blank" rel="external">数据集</a></p>
<h4 id="4-KDD-1999-Data-Set"><a href="#4-KDD-1999-Data-Set" class="headerlink" title="4. KDD 1999 Data Set"></a>4. KDD 1999 Data Set</h4><p>&emsp;&emsp;是KDD让这个世界知道了还有数据挖掘比赛。这个数据集是一个分类问题。有400万行和48列，大约1.2GB。<br>&emsp;&emsp;<strong>问题</strong>: 给网络入侵检测器分好坏。<br>&emsp;&emsp;<a href="https://archive.ics.uci.edu/ml/datasets/KDD+Cup+1999+Data" target="_blank" rel="external">数据集</a></p>
<h4 id="5-Chicago-Crime-Data-Set"><a href="#5-Chicago-Crime-Data-Set" class="headerlink" title="5. Chicago Crime Data Set"></a>5. Chicago Crime Data Set</h4><p>&emsp;&emsp;数据科学家都要求具备处理大数据集的能力，各种企业也倾向于处理大规模数据。这个数据集会给你提供足够多的帮助让你在自己机器上处理大数据积累经验。问题很简单，但是数据管理才是关键。这个数据集有6M的数据，是一个多元分类问题。<br>&emsp;&emsp;<strong>问题</strong>:预测犯罪类型。<br>&emsp;&emsp;<a href="https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-present/ijzp-q8t2" target="_blank" rel="external">数据集</a>，点击 Export -&gt; CSV，下载数据。</p>
<hr>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>&emsp;&emsp;请不要致力于完成所有的项目，你应当根据自己的需求挑选所属领域、数据量大小都最适合你的数据集。你如果你是个机器学习的新手，就不要拿高级的数据集练手，毕竟贪多嚼不烂，还是一步步踏踏实实地来。<br>&emsp;&emsp;一旦你完成了2-3个项目，请立即修改你的CV并把相应文件上传到你的github（非常重要），现在很多招聘者通过github来挑选员工。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本文翻译自Analytics Vidhya网站的一篇文章，&lt;a href=&quot;https://www.analyticsvidhya.com/blog/2016/10/17-ultimate-data-science-projects-to-boost-your-knowledge-and-skills/&quot;&gt;17 Ultimate Data Science Projects To Boost Your Knowledge and Skills&lt;/a&gt;，有翻译不准的地方还请指正。&lt;br&gt;
    
    </summary>
    
      <category term="学习资源" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="机器学习" scheme="http://yaodong.ml/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Machine Learning" scheme="http://yaodong.ml/tags/Machine-Learning/"/>
    
      <category term="数据集" scheme="http://yaodong.ml/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>算法设计思想之分支界限</title>
    <link href="http://yaodong.ml/algorithms/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B9%8B%E5%88%86%E6%94%AF%E7%95%8C%E9%99%90.html"/>
    <id>http://yaodong.ml/algorithms/算法设计思想之分支界限.html</id>
    <published>2016-11-15T08:13:30.000Z</published>
    <updated>2016-11-15T08:19:15.922Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文记录了博主关于分支界限算法设计思想的学习总结。<br><a id="more"></a><br>&emsp;&emsp; 类似于回溯法，<strong>分支限界法（branch-and-bound method）</strong>也是一种在问题的解空间树T上搜索问题解的算法。但分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。<br>&emsp;&emsp;<strong>分支限界法（branch-and-bound method）</strong>， “<strong>分支</strong>”是指采用广度优先遍历的策略，依次生成扩展结点的所有分支（即：儿子结点）；“<strong>限界</strong>”是在结点扩展过程中，计算结点的上界（或下界），并根据“剪枝函数”剪去搜索树的某些分支，从而提高搜索效率。</p>
<h3 id="分支限界算法的基本思想"><a href="#分支限界算法的基本思想" class="headerlink" title="分支限界算法的基本思想"></a>分支限界算法的基本思想</h3><p>&emsp;&emsp;按照广度优先遍历的原则，一个活结点一旦成为扩展结点（E-结点）R后，算法将依次生成它的全部孩子结点，将那些导致不可行解或导致非最优解的儿子舍弃，其余儿子加入活结点表中。然后，从活结点表中取出一个结点作为当前扩展结点。重复上述结点扩展过程，直至找到问题的解或判定无解为止。</p>
<h3 id="常见的分支限界法"><a href="#常见的分支限界法" class="headerlink" title="常见的分支限界法"></a>常见的分支限界法</h3><h4 id="FIFO分支限界法-队列式分支限界法"><a href="#FIFO分支限界法-队列式分支限界法" class="headerlink" title="FIFO分支限界法(队列式分支限界法)"></a>FIFO分支限界法(队列式分支限界法)</h4><p>&emsp;&emsp;基本思想：按照队列先进先出(FIFO)原则选取下一个活结点为扩展结点。<br>&emsp;&emsp;搜索策略：一开始，根结点是唯一的活结点，根结点入队。从活结点队中取出根结点后，作为当前扩展结点。对当前扩展结点，先从左到右地产生它的所有儿子，用约束条件检查，把所有满足约束函数的儿子加入活结点队列中。再从活结点表中取出队首结点（队中最先进来的结点）为当前扩展结点，……，直到找到一个解或活结点队列为空为止。</p>
<h4 id="Least-Cost分支限界法-优先队列式分支限界法"><a href="#Least-Cost分支限界法-优先队列式分支限界法" class="headerlink" title="Least Cost分支限界法(优先队列式分支限界法)"></a>Least Cost分支限界法(优先队列式分支限界法)</h4><p>&emsp;&emsp;基本思想：为了加速搜索的进程，应采用有效地方式选择活结点进行扩展。按照优先队列中规定的优先级选取优先级最高的结点成为当前扩展结点。<br>&emsp;&emsp;搜索策略：对每一活结点计算一个优先级（某些信息的函数值），并根据这些优先级；从当前活结点表中优先选择一个优先级最高（最有利）的结点作为扩展结点，使搜索朝着解空间树上有最优解的分支推进，以便尽快地找出一个最优解。再从活结点表中下一个优先级别最高的结点为当前扩展结点，……，直到找到一个解或活结点队列为空为止。</p>
<h3 id="分支限界算法与回溯法的区别"><a href="#分支限界算法与回溯法的区别" class="headerlink" title="分支限界算法与回溯法的区别"></a>分支限界算法与回溯法的区别</h3><p>&emsp;&emsp;分支限界算法与回溯法都是在所给定问题的解空间树上搜索问题的解的算法。但二者也有一些不同之处：</p>
<ul>
<li><strong>算法目标不同</strong>：回溯算法的目的是找出解空间树中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的条件下找出在某种意义下的最优解。 </li>
<li><strong>搜索方式的不同</strong>：回溯法以深度优先遍历的方式搜索解空间树，而分支限界法则以广度优先遍历或以最小耗费优先的方式搜索解空间树</li>
</ul>
<h3 id="分支界限的应用"><a href="#分支界限的应用" class="headerlink" title="分支界限的应用"></a>分支界限的应用</h3><ol>
<li>队列式分支限界法：按照队列先进先出（FIFO）原则选取下一个结点为扩展结点。 </li>
<li>优先队列式分支限界法：按照优先队列中规定的优先级选取优先级最高的结点成为当前扩展结点。</li>
<li>单源最短路径问题</li>
<li>装载问题、批处理作业问题、布线问题</li>
<li>0-1背包问题</li>
<li>旅行售货员问题</li>
<li>栈式搜索方法，按照FILO</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文记录了博主关于分支界限算法设计思想的学习总结。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法设计" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计思想之回溯算法</title>
    <link href="http://yaodong.ml/algorithms/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B9%8B%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html"/>
    <id>http://yaodong.ml/algorithms/算法设计思想之回溯算法.html</id>
    <published>2016-11-15T08:12:20.000Z</published>
    <updated>2016-11-15T08:21:30.019Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文记录了博主关于回溯算法设计思想的学习总结。<br><a id="more"></a></p>
<blockquote>
<p><strong>回溯（Backtracking）算法</strong>也叫试探法，属于暴力求解的范畴。<strong>回溯（Backtracking）算法</strong>是一种既有系统性又有跳跃性的的搜索算法，适用于求解具有约束条件，并且有多个候选解的问题。</p>
</blockquote>
<h3 id="回溯算法的设计思想"><a href="#回溯算法的设计思想" class="headerlink" title="回溯算法的设计思想"></a>回溯算法的设计思想</h3><p>&emsp;&emsp;<strong>回溯算法</strong>采用试探的思想，尝试分步解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。</p>
<p>&emsp;&emsp;<strong>回溯算法</strong>在包含问题的所有解的解空间树中，按照深度优先遍历的策略，从根结点出发搜索整个解空间树。<br>&emsp;&emsp;当算法搜索至解空间树的任一结点时，先判断该结点是否肯定不包含问题的解。如果肯定不包含，则跳过对以该结点为根的子树的所有搜索，病逐层向其祖先结点回溯。否则，进入该子树，继续按深度优先遍历的策略进行搜索。<br>&emsp;&emsp;<strong>回溯算法</strong>通常用最简单的递归方法来实现，反复重复上述的步骤后会出现两种情况：</p>
<ol>
<li>找到了符合要求的正确答案</li>
<li>遍历了所有可能的分步方法后，宣告该问题没有符合要求的解</li>
</ol>
<p>&emsp;&emsp;回溯法是设计递归过程的一种重要方法，回溯算法的实质是先序遍历一颗状态树的过程，只不过这棵状态树不是遍历前预先建立的，而是隐含在遍历过程中。</p>
<h3 id="回溯算法的相关概念"><a href="#回溯算法的相关概念" class="headerlink" title="回溯算法的相关概念"></a>回溯算法的相关概念</h3><h4 id="约束函数-amp-限界函数"><a href="#约束函数-amp-限界函数" class="headerlink" title="约束函数&amp;限界函数"></a>约束函数&amp;限界函数</h4><p>&emsp;&emsp;约束函数可根据所求解问题中的限制条件构造。约束函数描述了给定问题的合法解的一般特征，用于DFS深度优先遍历过程中去除不合法的解，从而避免无效搜索。此外，约束函数是对于任何状态空间树上的节点都有效、等价的。</p>
<h4 id="状态空间树"><a href="#状态空间树" class="headerlink" title="状态空间树"></a>状态空间树</h4><p>&emsp;&emsp;状态空间树是对问题的所有解的图形描述。树上的每个子节点的解都只有一个部分与父节点不同。</p>
<h4 id="扩展节点、活结点、死结点"><a href="#扩展节点、活结点、死结点" class="headerlink" title="扩展节点、活结点、死结点"></a>扩展节点、活结点、死结点</h4><p>&emsp;&emsp;扩展节点，是当前正在求出它的子节点的节点，在DFS中，只允许有一个扩展节点。<br>&emsp;&emsp;节点本身和其父节点满足约束函数和限界条件的结点称为活结点。活结点需要进行DFS递归遍历<br>&emsp;&emsp;死结点反之，死结点是不满足约束函数的结点，DFS过程不必遍历死结点的子节点。</p>
<h3 id="回溯算法的求解步骤"><a href="#回溯算法的求解步骤" class="headerlink" title="回溯算法的求解步骤"></a>回溯算法的求解步骤</h3><ul>
<li>针对所给问题，定义问题的解空间</li>
<li>确定易于搜索的解空间结构</li>
<li>构造约束函数和限界函数，避免冗余的无效搜索</li>
<li>以深度优先遍历（<strong>DFS</strong>）搜索解空间树，并在搜索过程中用剪枝函数避免无效搜索</li>
</ul>
<h3 id="回溯算法的适用情形"><a href="#回溯算法的适用情形" class="headerlink" title="回溯算法的适用情形"></a>回溯算法的适用情形</h3><ol>
<li>给定的问题有很多组解，要求寻找问题的解集或者寻找满足某些约束条件的最佳解时，可以考虑使用回溯法</li>
<li>回溯算法虽然属于暴力求解范畴，但是回溯思想能避免很多不必要的穷举式搜索。因此回溯算法适用于求解一些组合数很大的问题</li>
<li>回溯算法的终止条件要注意以下两种情况：</li>
</ol>
<ul>
<li>回溯算法用于求问题的所有解时，要回溯到解状态树的根结点，且根结点的所有子树都已被搜索遍才结束</li>
<li>回溯算法用于求问题的任一解时，只要搜索到问题的一个解就可以结束</li>
</ul>
<h3 id="回溯算法的应用"><a href="#回溯算法的应用" class="headerlink" title="回溯算法的应用"></a>回溯算法的应用</h3><ul>
<li>八皇后问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文记录了博主关于回溯算法设计思想的学习总结。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法设计" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计思想之贪心算法</title>
    <link href="http://yaodong.ml/algorithms/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B9%8B%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html"/>
    <id>http://yaodong.ml/algorithms/算法设计思想之贪心算法.html</id>
    <published>2016-11-15T08:11:25.000Z</published>
    <updated>2016-11-15T08:17:32.345Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文记录了博主关于贪心算法设计思想的学习总结。<br><a id="more"></a></p>
<blockquote>
<p><strong>贪心算法（greedy algorithm）</strong>，又称<strong>贪婪算法</strong>，在每一步都选择当前状态下能达到最好或最优的策略，从而希望算法结束时的结果就是全局最优的算法。换句话说，贪心算法不考虑全局只考虑局部最优，基于当前状态做出局部最优选择。</p>
</blockquote>
<h3 id="贪心算法的基本步骤"><a href="#贪心算法的基本步骤" class="headerlink" title="贪心算法的基本步骤"></a>贪心算法的基本步骤</h3><p>&emsp;&emsp;贪心算法把原问题可分解为多个子问题，然后贪心算法以迭代的方式作出每一步的贪心选择策略，每作一次贪心选择就将原复杂问题化简为规模更小的子问题。一直迭代求解子问题的局部最优解，最终子问题的最优解能递推到原复杂问题的最优解。<br>&emsp;&emsp;<strong>贪心算法求解问题的步骤</strong>：</p>
<ol>
<li>对问题进行分析，确定原问题的最优子结构</li>
<li>针对分解后的各子问题，设计递归求解算法</li>
<li>证明原问题总是有一个最优解是贪心选择得到的，即证明贪心选择是安全的</li>
<li>证明剩余的子问题的最优解结合贪心选择策略，可以得到原问题的最优解</li>
<li>设计出一个实现贪心策略的递归算法，并将递归算法转换成迭代算法</li>
</ol>
<p>&emsp;&emsp;贪心算法通常用于求解一些最优化问题。 贪心算法并不总能求得问题的整体最优解，但是由于贪心法的高效性以及其所求得的答案通常很接近最优结果，贪心法也可以用作辅助算法或者直接解决一些要求结果不特别精确的问题。</p>
<h3 id="贪心算法的适用情形"><a href="#贪心算法的适用情形" class="headerlink" title="贪心算法的适用情形"></a>贪心算法的适用情形</h3><ol>
<li>给定的问题是否能使用贪心算法策略求解，首先要确定该问题是否具有<strong>贪心选择性质</strong>。贪心选择性质是指一系列子问题的局部最优策略可以导致产生全局最优解。给定问题的整体最优解可以通过这些子问题的局部最优解得到。这也是贪心算法与动态规划算法的主要区别</li>
<li>给定问题是否具有贪心选择性质，需要证明子问题每一步进行的贪心选择最终导致问题的整体最优解。</li>
<li>一个问题的最优解包含其子问题的最优解，或者局部最优解能决定全局最优解，则称此问题具有<strong>最优子结构性质</strong>。贪心算法可用于求解具有最优子结构性质的问题。<br>因此当问题具有最优子结构性质时，可以考虑使用贪心算法。</li>
<li>贪心算法中，每一步的贪心选择可以依赖于以往的选择策略，但决不依赖于未来子问题的选择，也不依赖于将来子问题的解。简单来说，<strong>Greedy Algorithm</strong>选择的贪心策略必须具备无后效性，即将来子问题的选择策略不会影响先前子问题的求解。所以对所采用的贪心策略一定要仔细分析其是否满足<strong>无后效性</strong>。</li>
</ol>
<h3 id="贪心算法与动态规划算法的区别"><a href="#贪心算法与动态规划算法的区别" class="headerlink" title="贪心算法与动态规划算法的区别"></a>贪心算法与动态规划算法的区别</h3><ol>
<li>动态规划算法通常以自底向上的方式迭代求解各子问题，而贪心算法则通常以自顶向下的方式对问题进行求解。</li>
<li>在动态规划算法中，原问题每步所作的选择往往依赖于相关子问题的解。只有在求解相关子问题之后，原问题才能作出在当前状态的选择。而在贪心算法中，仅在当前状态下作出最好选择，即局部最优解，然后再求解相应的子问题。</li>
<li>贪心算法与动态规划的不同在于它每对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</li>
</ol>
<h3 id="贪心算法的应用"><a href="#贪心算法的应用" class="headerlink" title="贪心算法的应用"></a>贪心算法的应用</h3><ul>
<li><code>Dijkstra</code>算法</li>
<li><code>Prim</code>算法</li>
<li><code>Kruskal</code>算法</li>
<li><code>Huffman</code>编码</li>
<li>磁盘文件的存储算法</li>
<li>生产调度问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文记录了博主关于贪心算法设计思想的学习总结。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法设计" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计思想之分治算法</title>
    <link href="http://yaodong.ml/algorithms/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B9%8B%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95.html"/>
    <id>http://yaodong.ml/algorithms/算法设计思想之分治算法.html</id>
    <published>2016-11-15T08:08:14.000Z</published>
    <updated>2016-11-15T08:25:50.266Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文记录了博主关于分治算法设计思想的学习总结。<br><a id="more"></a></p>
<blockquote>
<p><strong>分治法（Divide and Conquer）</strong>是基于多项分支递归的一种很重要的算法范式思想。分治的意思是“分而治之”，把复杂问题分解成多个规模较小、相对独立、与原问题形式相同的子问题，子问题的求解很简单很直观，原问题的解即子问题的解的合并。</p>
</blockquote>
<p>&emsp;&emsp;分治与递归经常同时应用在算法设计中，是诸多高效算法的基础，因此也产生了很多著名的高效算法。如（快速排序、归并排序）、傅里叶变换等。</p>
<h3 id="分治算法的设计思想"><a href="#分治算法的设计思想" class="headerlink" title="分治算法的设计思想"></a>分治算法的设计思想</h3><ul>
<li>将计算规模较大的复杂问题，分割成规模较小的相同性质的多个子问题，对简单的子问题进行逐个击破，分而治之</li>
<li>使用数学上的不完全归纳法，寻找求解原问题的方程表达式，根据方程式设计递归程序Solution</li>
</ul>
<h3 id="分治算法的递归求解步骤"><a href="#分治算法的递归求解步骤" class="headerlink" title="分治算法的递归求解步骤"></a>分治算法的递归求解步骤</h3><ol>
<li><strong>分解</strong>：将原问题分解为若干个规模较小，相对独立，与原问题形式相同的子问题。</li>
<li><strong>求解</strong>：若子问题规模较小且易于解决时，则直接解。否则，递归地解决各子问题。</li>
<li><strong>合并</strong>：将各子问题的解合并为原问题的解。</li>
</ol>
<h3 id="分治算法的适用情形"><a href="#分治算法的适用情形" class="headerlink" title="分治算法的适用情形"></a>分治算法的适用情形</h3><ol>
<li>原复杂问题的规模缩减到一定程度后可以很容易求解</li>
<li>原问题可分解成若干个规模较小、与原问题性质相同的子问题，即原问题具有<strong>最优子结构</strong>性质，这条特性反映了递归思想</li>
<li>原复杂问题分解得到的子问题相互之间是独立的，即<strong>子问题之间不包含公共的问题</strong></li>
<li>子问题的解可以合并为原复杂问题的解</li>
<li>算法求解过程中至少含有两个递归调用，也就是说，只进行一次递归调用的不属于分治算法范畴</li>
</ol>
<h3 id="分治算法与动态规划算法的区别"><a href="#分治算法与动态规划算法的区别" class="headerlink" title="分治算法与动态规划算法的区别"></a>分治算法与动态规划算法的区别</h3><ol>
<li>分治法与动态规划都要求原问题具有最有子结构，都是将问题分解成若干个规模较小的子问题</li>
<li>动态规划是将原问题分解为多个相同性质的子问题，这些子问题相互之间有联系，有重叠。分治法将分解后的子问题看成是相互独立的。</li>
<li>动态规划通过迭代法自底向上求解，通过子问题的求解进而寻找原问题的最优解。而分治法是利用递归对各个子问题独立求解，最后将各子问题的解进行合并形成原问题的解。</li>
<li>若原复杂问题分解之后得到的各子问题之间不独立，则可以考虑使用动态规划算法</li>
</ol>
<h3 id="分治算法的复杂度分析"><a href="#分治算法的复杂度分析" class="headerlink" title="分治算法的复杂度分析"></a>分治算法的复杂度分析</h3><p>&emsp;&emsp;假设分治算法策略将原问题分解为<code>K</code>个计算规模为<code>n/m</code>的同质子问题，<code>m</code>表示问题规模减小的因子，$f(n)$为分解与合并子问题的计算复杂度。原问题的时间复杂度可用如下的递归表达式表示：</p>
<script type="math/tex; mode=display">T(n)=KT(n/m)+f(n)</script><h3 id="分治算法的应用"><a href="#分治算法的应用" class="headerlink" title="分治算法的应用"></a>分治算法的应用</h3><ul>
<li>二分查找</li>
<li>大整数乘法</li>
<li>棋盘覆盖</li>
<li>快速排序</li>
<li>合并排序</li>
<li>Strassen矩阵乘法</li>
<li>最接近点对问题</li>
<li>汉诺塔</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文记录了博主关于分治算法设计思想的学习总结。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法设计" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计思想之动态规划</title>
    <link href="http://yaodong.ml/algorithms/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html"/>
    <id>http://yaodong.ml/algorithms/算法设计思想之动态规划.html</id>
    <published>2016-11-15T07:59:11.000Z</published>
    <updated>2016-11-15T08:15:52.034Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;动态规划算法作为五大算法设计思想之一，重要性不言而喻。本博文记录了博主动态规划的学习总结。<br><a id="more"></a></p>
<blockquote>
<p><strong>动态规划</strong>（Dynamic programming，简称<strong>DP</strong>）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p>
</blockquote>
<p>&emsp;&emsp;动态规划的基本思想：要求解给定问题的最优解，把给定的复杂问题分解成多个规模较小的子问题，且子问题是同质的。动态规划中，欲求给定问题的最优解，首先要求解子问题的最优解，$DP$对同 的子问题只求解一次，并存储子问题的求解结果，便于后续求解使用时查询。</p>
<p>&emsp;&emsp;动态规划算法设计思想中的两个重要概念：状态和状态转移方程。根据子问题定义状态，描述状态之间的如何转移的方程称为状态转移方程。大部分情况下，某个状态只与它前面出现的状态有关， 而独立于后面的状态。<br>&nbsp;<br>&emsp;&emsp;动态规划算法主要分为有两步：1.将给定的问题（或子问题）抽象为状态（对应空间复杂度） 2.根据状态推导出子问题之间的状态转移方程（对应时间复杂度）。</p>
<h3 id="动态规划算法的总结"><a href="#动态规划算法的总结" class="headerlink" title="动态规划算法的总结"></a>动态规划算法的总结</h3><p>&emsp;&emsp;动态规划通常用于解决最优化问题。<br>&emsp;&emsp;动态规划算法的时间复杂度远小于暴力求解和回溯法。<br>&emsp;&emsp;采用动态规划思想解决问题的前提是所给定问题具有<strong>最优子结构</strong>和<strong>重叠子问题</strong>的性质：</p>
<ul>
<li><strong>最优子结构</strong>是指问题的最优解包含其子问题的最优解。动态规划按照自底向上的策略利用最优子结构，即首先找到子问题的最优解，然后逐步向上寻找问题的一个最优解。最优子结构在求解的过程中以两种方式变化：</li>
</ul>
<ol>
<li>有多少个子问题被使用在原问题的一个最优解中</li>
<li>构建问题的最优解时使用子问题时有多少种选择或组合</li>
</ol>
<ul>
<li><strong>重叠子问题</strong>是指用来解决原问题的递归算法可以反复地解同样的子问题，而不是总是产生新的子问题。重叠子问题的一个重要性质是同一个算法被不断递归调用以求解同一性质的问题</li>
<li>简而言之，动态规划的核心就是寻找问题的最优子结构，找到最优子结构之后将问题分解成几个同质的子问题，使用同一算法递归求解子问题，并把每个子问题的求解结果保存在辅助表中，供求解后续问题时查询使用，每次查表的时间复杂度为常数</li>
</ul>
<p>&emsp;&emsp;<strong>算法思想</strong>是将给定的问题分解成几个相互不独立的子问题，各子问题之间是同质的，又称重叠子问题。对每个子问题只求解一次，并将其计算结果保存到辅助表中，便于后续子问题的计算。动态规划算法的设计步骤如下：</p>
<ol>
<li>描述问题的最优解的结构：分析给定问题出现最优解的情形，将给定的问题抽象化</li>
<li>将给定问题分解成同质的子问题，分析子问题如何才能得到最优解，并给出子问题最优解的递归公式</li>
<li>根据递归公式，采用自底向上的策略，计算每个子问题的最优解，将结果保存到辅助表中</li>
<li>根据每个子问题的最优解，选择或构造给定问题的最优解</li>
</ol>
<h3 id="动态规划的应用"><a href="#动态规划的应用" class="headerlink" title="动态规划的应用"></a>动态规划的应用</h3><ul>
<li><p>斐波那契数列</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用动态规划算法思想求解斐波那契数列</div><div class="line"> * <span class="doctag">@param</span> num: 要求的斐波那契数列的第idx个数</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[num];<span class="comment">//数组默认初始化元素全为0</span></div><div class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(num == <span class="number">1</span> || num == <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    fib[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    fib[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; num;i++) &#123;</div><div class="line">        fib[i] = fib[i-<span class="number">1</span>] + fib[i-<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fib[num-<span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>求最长递增子序列（不连续）（LIS）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 动态规划思想求解最长非降子序列(longest increasing subsequence,LIS)</div><div class="line"> * 代码以辅助理解动态规划算法的思想为目的，根据实际需求对形参进行改动</div><div class="line"> * <span class="doctag">@param</span> </div><div class="line"> * <span class="doctag">@return</span> 最长非降子序列的长度</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution_LIS</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] series = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">int</span> num_length = series.length;</div><div class="line">    <span class="keyword">if</span> (num_length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//定义longest数组，longest[i]表示前i个数中以series[i]结尾的最长非降子序列的长度</span></div><div class="line">    <span class="keyword">int</span>[] longest = <span class="keyword">new</span> <span class="keyword">int</span>[num_length];</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num_length;i++) &#123;</div><div class="line">        longest[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j++) &#123;</div><div class="line">            <span class="keyword">if</span>((series[j] &lt;= series[i]) &amp;&amp; (longest[j]+<span class="number">1</span> &gt; longest[i])) &#123;</div><div class="line">                longest[i] = longest[j] + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(longest[i] &gt; len)</div><div class="line">            len = longest[i];</div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>0-1背包问题<br>&emsp;&emsp;一位游客去森林里探险，发现了一堆宝石，宝石的数量为$N$。他的背包的容量有限，只能带走一部分宝石。游客该如何选择哪些宝石带走，以获得最大利益？（宝石的编号为$0\sim N-1$）,编号为$i$的宝石的体积和价值分别为$vol[i]$和$w[i]$，背包的容量为$C$。</li>
<li>最大连续子序列之和<ul>
<li>最长公共子序列</li>
<li><strong>Leetcode 198</strong></li>
</ul>
</li>
</ul>
<h3 id="使用动态规划思想的算法"><a href="#使用动态规划思想的算法" class="headerlink" title="使用动态规划思想的算法"></a>使用动态规划思想的算法</h3><ul>
<li><strong>Floyd-Warshall</strong>算法</li>
<li><strong>Viterbi</strong>算法</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li>Anker关于动态规划的总结：<a href="http://www.cnblogs.com/Anker/archive/2013/03/15/2961725.html" target="_blank" rel="external">《算法导论》读书笔记之动态规划</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;动态规划算法作为五大算法设计思想之一，重要性不言而喻。本博文记录了博主动态规划的学习总结。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法设计" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记之面向对象高级编程</title>
    <link href="http://yaodong.ml/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B.html"/>
    <id>http://yaodong.ml/python/python学习笔记之面向对象高级编程.html</id>
    <published>2016-11-12T06:44:55.000Z</published>
    <updated>2017-03-14T07:02:58.089Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文是python面向对象高级编程的学习总结，主要参考<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰的python教程</a>整理而来。<br><a id="more"></a></p>
<h3 id="使用-slot-限制动态添加属性"><a href="#使用-slot-限制动态添加属性" class="headerlink" title="使用__slot__限制动态添加属性"></a>使用<code>__slot__</code>限制动态添加属性</h3><p>&emsp;&emsp;python作为一门动态语言，比静态语言更灵活，功能更强大。python可以实现对类的具体对象添加属性和方法，但是对类的一个具体实例动态添加属性和方法只对当前实例对象有效，对该类的其他实例对象是不起作用的。<br>&emsp;&emsp;给类的所有实例对象都绑定属性方法，可以<code>MethodType()</code>函数通过给class绑定属性和方法实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_method</span><span class="params">(self,var)</span>:</span></div><div class="line">    self.var = var</div><div class="line">% 给MyObject类添加new_method方法</div><div class="line">MyObject.new_method = MethodType(new_method,<span class="keyword">None</span>,MyObject)</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;python语言的动态特性允许在程序运行的过程中为对象的所属类添加属性或方法。相应地，为了保护自定义类的固有属性和方法，在定义class时需要通过一定的措施来限制对该class动态添加属性和方法。在定义class时，可添加一个<code>__slots__</code>变量，来限制该class能添加的属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">"name"</span>,<span class="string">"age"</span>)   <span class="comment"># 用tuple定义允许绑定的属性名称</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;通过<code>__slots__</code>变量对class进行约束后，如果在程序运行过程中对class添加<code>__slots__</code>中不存在的属性，则会抛出AttributeError。<br>&emsp;&emsp;使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前class起作用，对继承该class的子类是不起作用的。除非在子类中也定义<code>__slots__</code>，这样，子类允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p>
<h3 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h3><p>&emsp;&emsp;对class添加属性时，要进行参数检查，检查参数的格式或数值范围。传统的实现方法是在set_xx()方法里加入判断：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</div><div class="line">        self._score = value</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;python的装饰器（generator）可以给函数在程序运行期间添加属性和方法。Python内置的<code>@property</code>装饰器可以把一个方法变成属性以便于调用。把一个<code>getter()</code>方法变成属性，只需在相应函数前加上<code>@property</code>即可。此外，@property的另一个装饰器<code>@score.setter</code>，可以把一个setter()方法变成属性赋值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span>   <span class="comment">#实现get_score功能</span></div><div class="line">        <span class="keyword">return</span> self._score</div><div class="line"><span class="meta">    @score.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span>    <span class="comment"># 实现set_score功能</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</div><div class="line">        self._score = value</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;定义只读属性：只定义<code>getter()</code>方法，不定义<code>setter()</code>方法。有了<code>@property</code>，对类的指定属性只添加<code>@property</code>，不添加<code>@property.setter</code>即可实现只读属性。</p>
<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>&emsp;&emsp;通过继承，子类可以在实现父类所有功能的基础上，扩展更多自定义功能。Python支持多重继承，这一点区别于Java。通过多重继承，子类可以同时获得多个父类的所有功能。<br>&emsp;&emsp; <strong>Mixin</strong>是python多重继承中的一种设计模式，可以看作多重继承在特定场景下的一种应用。Mixin实质上是利用语言特性来更简洁地实现组合模式。类比于Java，Mixin相当于Java中以<code>-able</code>结尾的接口，不同的是，传统的<code>interface</code>概念并不包含实现，而Mixin包含实现。多重继承中，继承Mixin类是为了在原有父类的基础上添加某些可选功能。通俗的讲：<strong>继承强调$I \ am$，Mixin强调$I \ can$</strong>。<br>&emsp;&emsp;<strong>Mixin</strong>的目的就是给一个类增加多个功能。在设计类时，优先考虑通过多重继承来组合多个Mixin的功能，而不是设计多层次的复杂的继承关系。</p>
<h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><p>&emsp;&emsp;<strong>python</strong>中，形如<code>__xxx__</code>的变量或者函数都是有特殊用途的，这些特殊的函数可以帮助设计定制类。<br>&emsp;&emsp;<code>__str__</code>可用于打印class的基本信息，比如变量和方法等。<code>__str__</code>相当于Java中的<code>toString()</code>方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Student object (name: %s)'</span> % self.name</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Student(<span class="string">'Michael'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student object (name: Michael)</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<code>__iter__</code>用于生成可迭代对象，使得class可以用于循环中。该方法返回一个迭代对象。class定义<code>__iter__</code>的同时，还需要定义<code>next()</code>方法，便于访问可迭代对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></div><div class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></div><div class="line">            <span class="keyword">raise</span> StopIteration();</div><div class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<code>__getitem__()</code>用于获取可迭代对象指定索引位置的元素。若class仅实现<code>__iter__</code>方法，则只能通过<code>next()</code>方法从前到后逐个获取class对象的元素，不能像list一样按照下标访问元素，也不能使用切片（slice）访问部分元素，<code>__getitem__()</code>方法可以实现这个功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(n, int):</div><div class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">                a, b = b, a + b</div><div class="line">            <span class="keyword">return</span> a</div><div class="line">        <span class="keyword">if</span> isinstance(n, slice):</div><div class="line">            start = n.start</div><div class="line">            stop = n.stop</div><div class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">            L = []</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</div><div class="line">                <span class="keyword">if</span> x &gt;= start:</div><div class="line">                    L.append(a)</div><div class="line">                a, b = b, a + b</div><div class="line">            <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<code>__setitem__()</code>方法，把class对象视为list或dict来对集合赋值。<br>&emsp;&emsp;<code>__delitem__()</code>方法，用于删除某个元素<br>&emsp;&emsp;<code>__getattr__()</code>方法，用于解决class对象调用不存在的方法或属性，系统报错的问题。注意，只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已存在的属性，不会在<code>__getattr__</code>中查找。<br>&emsp;&emsp;<code>__call__()</code>方法，实现调用class对象自身：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Michael'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s()</div><div class="line">My name <span class="keyword">is</span> Michael.</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<code>__call__()</code>还可以定义参数。对class实例对象进行直接调用就好比对一个函数进行调用一样，所以完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没有根本的区别。<br>&emsp;&emsp;<code>callable()</code>函数，我们就可以判断一个class实例对象是否是“可调用”对象。</p>
<h3 id="元类metaclass"><a href="#元类metaclass" class="headerlink" title="元类metaclass"></a>元类metaclass</h3><p>&emsp;&emsp;动态语言和静态语言最大的不同，就是类和函数不是编译时定义的，而是在运行时动态创建。也就是说，class的定义是运行时动态创建的。</p>
<h4 id="type-函数创建类"><a href="#type-函数创建类" class="headerlink" title="type()函数创建类"></a>type()函数创建类</h4><p>&emsp;&emsp;创建class可以使用type()函数。type()函数可以查看一个类型或变量的类型，上述代码中，Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span></div><div class="line">        print(<span class="string">'Hello, %s.'</span> % name)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> hello <span class="keyword">import</span> Hello</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h = Hello()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h.hello()</div><div class="line">Hello, world.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(Hello))</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(h))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">hello</span>.<span class="title">Hello</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;type()函数既可以返回一个对象的类型，又可以创建出新的类型。比如，可以通过type()函数创建出Hello类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span> <span class="comment"># 先定义函数</span></div><div class="line">    print(<span class="string">'Hello, %s.'</span> % name)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Hello = type(<span class="string">'Hello'</span>, (object,), dict(hello=fn)) <span class="comment"># (object,)是tuple的单元素写法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h = Hello()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h.hello()</div><div class="line">Hello, world.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(Hello))</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(h))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Hello</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;事实上，底层的Python解释器检测到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。</p>
<h3 id="通过metaclass创建类"><a href="#通过metaclass创建类" class="headerlink" title="通过metaclass创建类"></a>通过metaclass创建类</h3><p>&emsp;&emsp;Python面向对象编程的顺序是：先定义metaclass，根据metaclass创建class类，最后创建class类的实例对象。metaclass允许创建class类或者修改class类。换句话说，可以把class类看成是metaclass创建出来的“实例”。<br>&emsp;&emsp;按照默认习惯，metaclass的类名总是以<code>Metaclass</code>结尾，以便清楚地表示这是一个metaclass。<code>__new__()</code>方法接收到的参数依次是：当前准备创建的类的对象；类的名字；类继承的父类集合；类的方法集合。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">% metaclass是创建class类，所以必须从`type`类型派生</div><div class="line">class ListMetaclass(type):</div><div class="line">    def __new__(cls, name, bases, attrs):</div><div class="line">        attrs['add'] = lambda self, value: self.append(value)</div><div class="line">        return type.__new__(cls, name, bases, attrs)</div><div class="line">class MyList(list):</div><div class="line">    __metaclass__ = ListMetaclass # 魔术语句，指示Python解释器在创建MyList时，要通过ListMetaclass.__new__()来创建</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;一般情况下，不需使用metaclass创建class类，只有特殊情形下需要通过metaclass修改类定义。ORM就是一个典型的例子。ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，后续写代码更简单，无需直接操作SQL语句。要编写一个ORM框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文是python面向对象高级编程的学习总结，主要参考&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot;&gt;廖雪峰的python教程&lt;/a&gt;整理而来。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yaodong.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记之高级函数</title>
    <link href="http://yaodong.ml/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0.html"/>
    <id>http://yaodong.ml/python/python学习笔记之高级函数.html</id>
    <published>2016-11-11T07:48:47.000Z</published>
    <updated>2017-03-14T07:02:49.197Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文是python的高级函数语法的学习总结，主要参考<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰的python教程</a>整理而来。<br><a id="more"></a></p>
<h2 id="Python学习笔记之高级函数"><a href="#Python学习笔记之高级函数" class="headerlink" title="Python学习笔记之高级函数"></a>Python学习笔记之高级函数</h2><h3 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator(生成器)"></a>Generator(生成器)</h3><p>&emsp;&emsp;通过列表生成式生成的list直接保存在内存中，容量有限。如果列表中的元素可以根据某种算法推导得到，那么就可以在循环的过程中推导后续的元素值。Python中，这种一边循环一边计算的机制，称为生成器（Generator）。<br>&emsp;&emsp;创建generator：把一个列表生成式的[]改成()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x104feab40</span>&gt;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;generator中保存的不是具体的数据，而是循环生成元素所用到得算法或推导公式，因此，如果要计算generator后续元素的值，须先计算出之前的元素值，这一点与数据结构中的链表的性质很像。generator也是可迭代对象，因此可使用generator.next()或for循环来输出元素值。</p>
<h4 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h4><p>&emsp;&emsp;定义generator对象的另一种方法：如果一个函数定义中包含<code>yield</code>关键字，那么就不再是一个普通函数，而是一个generator。<br>&emsp;&emsp;generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而含有generator对象的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><p>&emsp;&emsp;函数式编程的特点：</p>
<ul>
<li>允许把函数本身作为参数传入另一个函数</li>
<li>允许函数的返回类型是一个函数</li>
<li>函数本身可以作为“变量”赋值给另一个变量，即：变量可以指向函数<br>&emsp;&emsp;函数式编程思想指出，变量可以指向函数，函数的参数也可以接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。简而言之，形参中包含另一个函数的自定义函数称为高阶函数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x)+f(y)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result = add(<span class="number">-5</span>, <span class="number">6</span>, abs)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;常用的高阶函数有<code>map</code>、<code>reduce</code>、<code>filter</code>、<code>sorted</code><br>&emsp;&emsp;map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。<br>&emsp;&emsp;reduce()函数接收两个参数，一个是函数，一个是序列，reduce把传入的函数作用在序列[x1, x2, x3,…]上，reduce把函数作用在序列中当前的元素的同时，继续和序列的下一个元素做函数运算。其效果就是：<code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</code>，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">13579</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;filter()函数接收两个参数，一个是函数，另一个是序列，用于过滤序列，返回满足筛选条件的结果。<br>&emsp;&emsp;删除list中的偶数，只保留奇数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>]</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;删除list中的空字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def not_empty(s):</div><div class="line">    return s and s.strip()</div><div class="line">&gt;&gt;&gt; filter(not_empty, [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, None, &apos;C&apos;, &apos;  &apos;])</div><div class="line">&gt;&gt;&gt; [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;sorted()函数是python内置的可以自定义比较规则的高阶函数，与上述高阶函数相似，sorted()也接收两个参数，一个序列，一个函数。sorted()通过接收一个比较函数来实现自定义的排序。比如，对字符串排序，对dict进行排序。<br>&emsp;&emsp;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"></div><div class="line">% 安装从小到大的顺序对list中的数字进行排序</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> x &lt; y:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp) <span class="comment"># [36, 21, 12, 9, 5]</span></div><div class="line"></div><div class="line">% 忽略大小写，按照字母序排序</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_ignore_case</span><span class="params">(s1, s2)</span>:</span></div><div class="line">    u1 = s1.upper()</div><div class="line">    u2 = s2.upper()</div><div class="line">    <span class="keyword">if</span> u1 &lt; u2:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> u1 &gt; u2:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], cmp_ignore_case) <span class="comment">#['about', 'bob', 'Credit', 'Zoo']</span></div></pre></td></tr></table></figure></p>
<h4 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h4><p>&emsp;&emsp;高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。当返回值是函数类型时，返回的是具体的函数对象，不是具体的值，当再次调用该返回函数时，才真正执行该返回函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            ax = ax + n</div><div class="line">        <span class="keyword">return</span> ax</div><div class="line">    <span class="keyword">return</span> sum</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;上述代码定义了一个返回sum()对象的lazy_sum函数，而不是返回具体的sum值。<br>&emsp;&emsp;<strong>闭包</strong>：定义返回类型为函数对象的函数时，内部函数可以引用外部函数的参数和局部变量，而且相关的参数和变量都保存在返回的函数中，这种语法称为<strong>闭包（Closure）</strong>。<br>&emsp;&emsp;返回闭包时需注意：返回函数不要引用任何循环变量，或者后续会发生变化的变量，否则会得到预料之外的结果。这是因为返回的函数在其内部引用了外部函数中定义的局部变量args，当一个函数返回了该返回函数后，其内部的局部变量还被新的返回函数引用，进而引发无法预知的结果。</p>
<h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>&emsp;&emsp;匿名函数用lambda关键字表示，通常作为高阶函数的传入参数使用。另外，匿名函数只能有一个表达式，没有return语句。匿名函数的返回值就是lambda表达式的结果。<br>&emsp;&emsp;匿名函数的好处之一是：匿名函数没有名字因此，不必担心函数名冲突。此外，匿名函数也是一个函数对象，因此可以把匿名函数赋值给一个变量，再利用变量来调用该函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x: x * x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x10453d7d0</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">5</span>)</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;同样，也可以把匿名函数作为返回值返回，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x * x + y * y</div></pre></td></tr></table></figure></p>
<h4 id="装饰器decorator"><a href="#装饰器decorator" class="headerlink" title="装饰器decorator"></a>装饰器decorator</h4><p>&emsp;&emsp;在程序运行期间为函数动态增加功能的方式，称为“装饰器”。装饰器不改变函数原油的定义，只是在函数运行期间为其添加功能。<strong>decorator</strong>的本质是一个返回类型为函数对象的高阶函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"call %s():"</span> % func.__name__</div><div class="line">        <span class="keyword">return</span> func(*args,**kw)</div><div class="line">    <span class="keyword">return</span> wrappre <span class="comment"># 返回类型是函数对象</span></div><div class="line">% python的@语法</div><div class="line">% 借助@语法，使得在调用log()函数，其中log()函数为形参函数func添加了wrapper功能</div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"2016-11-11"</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Python的@语法：把@log放到now()函数的定义处，相当于执行了语句：now = log(now)<br>&emsp;&emsp;decorator的实质还是函数对象，具有<code>__name__</code>属性。执行输入参数是原函数（now）的decorator函数后，返回值最终是decorator函数内定义的新函数（wrapper）。即原函数经过decorator函数后，<code>__name__</code>属性发生了改变。因此为了避免某些依赖函数签名的代码执行出错，需要把原始函数的<code>__name__</code>等属性复制到generator内部的新函数中。Python内置的<code>functools.wraps</code>可以实现这个功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call %s():'</span> % func.__name__</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure></p>
<h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>&emsp;&emsp;Python的functools模块提供了偏函数（<strong>partial function</strong>）功能。偏函数的作用是把函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会传入指定默认值的参数。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">% int()函数可根据参数base,指定N进制转换</div><div class="line">def int2(x,base=2)</div><div class="line">    return int(x,base)</div><div class="line"></div><div class="line">% 用偏函数实现</div><div class="line">&gt;&gt;&gt; import functools</div><div class="line">&gt;&gt;&gt; int2 = functools.partial(int, base=2)</div><div class="line">&gt;&gt;&gt; int2('1000000')</div><div class="line">64</div><div class="line">&gt;&gt;&gt; int2('1010101')</div><div class="line">85</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Python的functools模块把int(x,base=2)简化为int2，执行int2(‘10010’)相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kw = &#123; base: <span class="number">2</span> &#125;</div><div class="line">int(<span class="string">'10010'</span>, **kw)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文是python的高级函数语法的学习总结，主要参考&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot;&gt;廖雪峰的python教程&lt;/a&gt;整理而来。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yaodong.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库学习笔记</title>
    <link href="http://yaodong.ml/articles/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yaodong.ml/articles/MySQL数据库学习笔记.html</id>
    <published>2016-11-03T03:37:21.000Z</published>
    <updated>2017-03-14T07:03:55.861Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文记录MySQL的相关学习笔记，欢迎指正。<br><a id="more"></a></p>
<h3 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h3><ol>
<li>常用关系数据库：</li>
</ol>
<ul>
<li><strong>Oracle</strong></li>
<li><strong>MySQL</strong></li>
<li><strong>DB2</strong></li>
<li><strong>SQL Server</strong></li>
</ul>
<ol>
<li><strong>SQL</strong>：<strong>Structrured Query Language</strong>，结构化查询语言，是一种定义、操作、管理<strong>关系数据库</strong>的语法。</li>
<li><strong>编程大小写问题</strong>：<strong>MySQL</strong>在<strong>window</strong>系统下不区分大小写，在其他系统严格区分大小写。</li>
<li>可以使用<strong>反引号</strong>``把关键字包含起来，当做普通字符串使用。</li>
<li><strong>Java</strong>与<strong>SQL</strong>语言的对应关系：</li>
</ol>
<ul>
<li><strong>Java</strong>类和表结构对应的；</li>
<li><strong>Java</strong>对象和表中的一条记录是对应的</li>
</ul>
<h3 id="MySQL语言组成"><a href="#MySQL语言组成" class="headerlink" title="MySQL语言组成"></a>MySQL语言组成</h3><ol>
<li><strong>数据定义语言</strong>(<strong>DDL</strong>，Data Definition Language)</li>
</ol>
<ul>
<li>描述数据库中要存储的现实世界实体的语言；</li>
<li>用于创建数据库或数据库的各种对象：<strong>表</strong>、<strong>视图</strong>、<strong>索引</strong>、<strong>同义词</strong>、<strong>聚簇</strong>等；</li>
<li><strong>常用关键字</strong>：<code>CREATE</code>，<code>ALTER</code> ，<code>DROP</code> ，<code>TRUNCATE</code></li>
<li>使用对象：<strong>DB Designer/Developer</strong></li>
</ul>
<ol>
<li><strong>数据查询语言</strong>(<strong>DQL</strong>: Data Query Language)</li>
</ol>
<ul>
<li>用于从表中查询并获取数据。</li>
<li>DQL基本结构是由<strong>SELECT</strong>子句，<strong>FROM</strong>子句，<strong>WHERE</strong>子句组成的查询块：<ol>
<li><code>SELECT</code> &lt;字段名表&gt;</li>
<li><code>FROM</code> &lt;表或视图名&gt;</li>
<li><code>WHERE</code> &lt;查询条件&gt;</li>
<li><code>ORDER BY</code>&lt;排序条件&gt;</li>
<li><code>AS</code>&lt;别名设置&gt;</li>
<li><code>BETWEEN AND</code></li>
<li><code>IN</code></li>
<li><code>DESC</code>/<code>ASC</code></li>
</ol>
</li>
<li>逻辑运算符：<code>and</code>/<code>or</code>/<code>not</code></li>
<li><code>LIKE</code>多用于<strong>模糊查询</strong>：<code>%</code>代表零个或多个字符； <code>_</code>代表一个字符</li>
</ul>
<ol>
<li><strong>数据操作语言</strong>(<strong>DML</strong>：Data Manipulation Language)</li>
</ol>
<ul>
<li>也称为动作查询语言；</li>
<li>用于对数据库表完成插入(<strong>INSERT</strong>)、删除(<strong>DELETE</strong>)、修改(<strong>UPDATE</strong>)数据操作；</li>
<li>常用关键字：<code>SELECT</code> ，<code>UPDATE</code>，<code>DELETE</code></li>
<li>使用对象：<strong>DB User</strong></li>
<li><strong>特别注意</strong>：MySQL语法中，字符串或日期要包含在单引号中</li>
</ul>
<ol>
<li><strong>数据控制语言</strong>(<strong>DCL</strong>：Data Control Language)：</li>
</ol>
<ul>
<li>对数据库的访问进行控制，包括数据完整性控制、数据安全性控制、数据库的恢复；</li>
<li>常用语句：<code>GRANT</code>,<code>DENY</code>,<code>REVOKE</code></li>
<li>使用对象：<strong>DBA</strong></li>
</ul>
<ol>
<li><strong>事务处理语言</strong>(<strong>TPL</strong>：Transaction Processing Language)：</li>
<li><strong>指针控制语言</strong>(<strong>CCL</strong>)：</li>
</ol>
<h3 id="MySQL命令行操作"><a href="#MySQL命令行操作" class="headerlink" title="MySQL命令行操作"></a>MySQL命令行操作</h3><ol>
<li>查看<strong>MySQL</strong>安装版本：<ul>
<li>输入<code>mysql&gt; status;</code></li>
<li>终端下cmd输入：<code>mysql -V</code></li>
<li>调用<strong>MySQL</strong>函数：<code>mysql&gt; select version();</code></li>
</ul>
</li>
<li><strong>Window</strong>下验证<strong>MySQL</strong>是否安装成功，若成功则连接到<strong>MySQL</strong>服务器：<ul>
<li><code>mysql -u root -p</code></li>
</ul>
</li>
<li><p>配置数据库服务器<strong>MySQL</strong></p>
<ul>
<li>图形化配置<strong>MySQL</strong></li>
<li>手工配置<strong>MySQL</strong></li>
</ul>
</li>
<li><p><strong>DOS</strong>登录<strong>MySQL</strong>服务器：</p>
<ul>
<li><code>mysql 127.0.0.1 -u root -p</code></li>
</ul>
</li>
<li><p><font color="#FF0000"><strong>数据库对象</strong></font>是指 存储、管理和使用数据的不同结构形式，主要包含<strong>表</strong>、<strong>视图</strong>、<strong>存储过程</strong>、<strong>函数</strong>、<strong>触发器</strong>和<strong>事件</strong>等。</p>
</li>
</ol>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>常用关键字：<code>CREATE</code>，<code>ALTER</code>，<code>DROP</code>，<code>TRUNCATE</code>，</li>
<li>显示所有的数据库：<code>SHOW DATABASES;</code></li>
<li>创建一个名称为mydb1的数据库：<code>CREATE DATABASE mydb1;</code></li>
<li>查看数据库的创建细节：<code>SHOW CREATE DATABASE mydb1;</code></li>
<li>创建一个使用gbk字符集的mydb2数据库：<br>  <code>CREATE DATABASE mydb2 CHARACTER SET gbk;</code></li>
<li>创建一个使用gbk字符集，并带校对规则的mydb3数据库：<br><code>CREATE DATABASE mydb3 CHARACTER SET gbk COLLATE gbk_chinese_ci;</code></li>
<li>删除数据库mydb3：<code>DROP DATABASE mydb3;</code></li>
<li>查看服务器中的数据库，并把mydb2的字符集修改为utf8：<br><code>ALTER DATABASE mydb2 CHARACTER SET utf8;</code></li>
</ul>
<h3 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h3><ol>
<li>整数类型：<ul>
<li>标准类型：<strong>INT</strong>，<strong>SMALLINT</strong></li>
<li>扩展类型：<strong>TINYIINT</strong>，<strong>MEDIUMINT</strong>，<strong>BIGINT</strong></li>
</ul>
</li>
<li>字符串类型</li>
</ol>
<ul>
<li><strong>CHAR</strong>系列字符串类型<ul>
<li><strong>CHAR(M)</strong>：字符串长度一般不变</li>
<li><strong>VARCHAR(M)</strong>：长度可变的字符串类型</li>
</ul>
</li>
<li><strong>TEXT</strong>系列字符串类型：<em>TEXT*</em>类型适用于存储大量字符串，如：存储大量的纯文本<ul>
<li><strong>TINYTEXT</strong></li>
<li><strong>TEXT</strong></li>
<li><strong>MEDIUMTEXT</strong></li>
<li><strong>LONGTEXT</strong> </li>
</ul>
</li>
<li><strong>BINARY</strong>系列字符串类型     <ul>
<li><strong>BINARY(M)</strong></li>
<li><strong>VARBINARY(M)</strong></li>
</ul>
</li>
<li>BLOB系列字符串类型<ul>
<li><strong>TINYBOLB</strong></li>
<li><strong>BLOB</strong></li>
<li><strong>MEDIUMBOLB</strong></li>
<li><strong>LONGBLOB</strong></li>
</ul>
</li>
</ul>
<ol>
<li>浮点型类型</li>
</ol>
<ul>
<li>浮点型类型<ul>
<li><strong>FLOAT</strong></li>
<li><strong>DOUBLE</strong></li>
</ul>
</li>
<li>定点数类型<ul>
<li><strong>DEC(M,D)</strong></li>
<li><strong>DECIMAL(M,D)</strong></li>
</ul>
</li>
<li>位类型<ul>
<li><strong>BIT(M)</strong></li>
</ul>
</li>
</ul>
<ol>
<li>日期和事件类型</li>
</ol>
<ul>
<li><strong>DATE</strong></li>
<li><strong>DATETIME</strong></li>
<li><strong>TIMESTAMP</strong></li>
<li><strong>TIME</strong></li>
<li><strong>YEAR</strong></li>
</ul>
<h3 id="表结构操作"><a href="#表结构操作" class="headerlink" title="表结构操作"></a>表结构操作</h3><ul>
<li>显示当前的数据库：<code>SELECT DATABASE();</code></li>
<li>选择数据库：<code>USE dbName;</code></li>
<li><p>在当前数据库中创建一个表：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</div><div class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</div><div class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">    gender <span class="built_in">varchar</span>(<span class="number">10</span>),</div><div class="line">    birthday <span class="built_in">date</span>,</div><div class="line">    entry_date <span class="built_in">date</span>,</div><div class="line">    job <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">    salary <span class="built_in">float</span>(<span class="number">8</span>,<span class="number">2</span>),</div><div class="line">    <span class="keyword">resume</span> <span class="built_in">text</span></div><div class="line">);</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</div><div class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">    <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>查看库中的所有表：<code>SHOW TABLES;</code></p>
</li>
<li>查看表的结构：<code>DESC employee;</code></li>
<li>查看表的创建细节：<code>SHOW CREATE TABLE employee;</code></li>
<li>在表employee中增加一个image列：<code>ALTER TABLE employee ADD image blob;</code></li>
<li>修改job列，使其长度为60：<code>ALTER TABLE employee MODIFY job varchar(60);</code></li>
<li>删除image列：<code>ALTER TABLE employee DROP image;</code></li>
<li>更改表名，改为user：<code>RENAME TABLE employee TO user;</code></li>
<li>修改表的字符集为utf8：<code>ALTER TABLE user CHARACTER SET utf8;</code></li>
<li>列名name修改为username：<br><code>ALTER TABLE user CHANGE name username varchar(100);</code></li>
<li>查看表中的所有记录：<code>SELECT * FROM user;</code></li>
<li><p>使用INSERT语句向表中插入记录：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (</div><div class="line">    <span class="number">1</span>,<span class="string">'zxn'</span>,<span class="string">'female'</span>,<span class="string">'1995-12-02'</span>,<span class="string">'2014-09-6'</span>,</div><div class="line">    <span class="string">'CEO'</span>,<span class="number">100000</span>,<span class="string">'beauty'</span></div><div class="line">);`</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> </div><div class="line">    (<span class="keyword">id</span>,username,gender,birthday,entry_date,job,salary,<span class="keyword">resume</span>)</div><div class="line"><span class="keyword">VALUES</span> (</div><div class="line"><span class="number">2</span>,<span class="string">'lyx'</span>,<span class="string">'male'</span>,<span class="string">'1945-12-02'</span>,<span class="string">'2014-09-16'</span>,</div><div class="line"><span class="string">'UFO'</span>,<span class="number">100000</span>,<span class="string">'beates'</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>插入中文数据：<code>mysql&gt; SHOW VARIABLES LIKE &#39;character%&#39;;</code>，显示如下：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">| character_set_client     | utf8   *客户端使用的编码</div><div class="line">| character_set_connection | utf8   DB连接时使用的编码</div><div class="line">| character_set_database   | utf8   数据库用的编码</div><div class="line">| character_set_results    | utf8   *查询结果集用的编码</div><div class="line">| character_set_server     | utf8   服务器使用的编码</div><div class="line">| character_set_system     | utf8   系统使用的编码</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;&emsp;因此，<strong>使用命令行要插入中文数据</strong>时，需要告知服务器客户端使用的编码：<code>SET character_set_client=gbk;</code>。同时告知服务器返回的结果集请使用<strong>UTF8</strong>：<br><code>SET character_set_results=gbk;</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">id</span>,username,gender,birthday,entry_date,job,salary,<span class="keyword">resume</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">'杜小文'</span>,<span class="string">'male'</span>,<span class="string">'1935-12-02'</span>,<span class="string">'2014-09-16'</span>,<span class="string">'CTO'</span>,<span class="number">100000</span>,<span class="string">'杜总'</span>);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;相关操作如下：</p>
<ul>
<li>将所有员工薪水修改为5000元：<br><code>UPDATE user SET salary=5000;</code></li>
<li>将姓名为’zxn’的员工薪水修改为3000元：<br><code>UPDATE user SET salary=3000 WHERE username=&#39;zxn&#39;;</code></li>
<li>将姓名为’lyx’的员工薪水修改为4000元,job改为ccc：<br><code>UPDATE user SET salary=4000,job=&#39;OOO&#39; WHERE username=&#39;lyx&#39;;</code></li>
<li>将杜小文的薪水在原有基础上增加1000元：<br><code>UPDATE user SET salary=salary+1000 WHERE username=&#39;杜小文&#39;;</code></li>
<li>删除表中名称为’zxn’的记：<br><code>DELETE FROM user WHERE username=&#39;zxn&#39;;</code></li>
<li>删除表中所有记录：<br><code>DELETE FROM user;#一条一条的删除</code></li>
<li>使用truncate删除表中记录：<br><code>TRUNCATE TABLE user;#摧毁整张表格，重新建立表结构#</code></li>
</ul>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><ul>
<li>查询表中所有学生的信息：<br><code>SELECT * FROM student;</code></li>
<li>查询表中所有学生的姓名和对应的英语成绩：<br><code>SELECT name,english FROM student;</code></li>
<li>过滤表中重复数据：<br><code>SELECT DISTINCT english FROM student;</code></li>
<li>在所有学生数学分数上加10分特长分：<br><code>SELECT name,math+10 FROM student;</code></li>
<li>统计每个学生的总分：<br><code>SELECT name,chinese+english+math FROM student;</code></li>
<li>使用别名表示学生分数：<br><code>SELECT name AS 姓名,chinese+english+math 总分 FROM student;</code></li>
<li>查询姓名为王五的学生成绩：<br><code>SELECT * FROM student WHERE name=&#39;王五&#39;;</code></li>
<li>查询英语成绩大于90分的同学：<br><code>SELECT * FROM student WHERE english&gt;90;</code></li>
<li>查询总分大于200分的所有同学：<br><code>SELECT * FROM student WHERE (chinese+english+math)&gt;200;</code></li>
<li>查询英语分数在 80－90之间的同学：<br><code>SELECT * FROM student WHERE english BETWEEN 80 AND 90;</code></li>
<li>查询数学分数为89,90,91的同学：<br><code>SELECT * FROM student WHERE math IN (89,90,91);</code></li>
<li>查询所有姓李的学生成绩：<br><code>SELECT * FROM student WHERE name LIKE &#39;李%&#39;;</code></li>
<li>查询数学分&gt;80，语文分&gt;80的同学：<br><code>SELECT * FROM student WHERE math&gt;80 AND chinese&gt;80;</code></li>
<li>对数学成绩排序后输出：<br><code>SELECT name,math FROM student ORDER by math;</code></li>
<li>对总分排序后输出，然后再按从高到低的顺序输出：<br><code>SELECT name AS 姓名,chinese+english+math 总分 FROM student ORDER BY 总分 DESC;</code></li>
<li>对姓李的学生成绩排序输出：<br><code>SELECT * FROM student WHERE name LIKE &#39;李%&#39; ORDER BY chinese;</code></li>
</ul>
<h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>&emsp;&emsp;数据的<strong>完整性</strong>指的是数据的<strong>可靠性</strong>和<strong>准确性</strong>。MySQL数据库中每个字段都可以包含附加约束或修饰符，这些修饰可以增加对所输入数据的检测和限制，进而保证数据的正确性。<br>数据的完整性可分为以下4类：</p>
<ol>
<li><p><strong>实体完整性</strong>（<strong>行完整性</strong>）</p>
<ul>
<li>规定表的每一条记录是表中唯一的实体。</li>
<li>实体完整性通过唯一性约束，主键约束或表示列属性来保证。</li>
<li><p>主键<strong>PRIMARY KEY</strong>特点：</p>
<ol>
<li>唯一性地标识一行记录</li>
<li>作为一个可以被外键引用的有效对象 </li>
<li>可分为<strong>逻辑主键</strong>和<strong>业务主键</strong></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#方式一</div><div class="line">CREATE TABLE t1(</div><div class="line">    id int PRIMARY KEY,</div><div class="line">    name varchar(100),</div><div class="line">    gender varchar(100),</div><div class="line">    age int</div><div class="line">);</div><div class="line">#方式2</div><div class="line">#优势：可定义联合主键</div><div class="line">CREATE TABLE t2(</div><div class="line">    id int;</div><div class="line">    name varchar(100),</div><div class="line">    gender varchar(100),</div><div class="line">    age int</div><div class="line">);</div><div class="line">#方式3（Recommend）</div><div class="line">CREATE TABLE t3(</div><div class="line">    id int,</div><div class="line">    name varcahr(100),</div><div class="line">    gender varchar(100),</div><div class="line">    age int</div><div class="line">);</div><div class="line">ALTER　TABLE t3 ADD PRIMARY KEY (id);</div><div class="line">#方式4：自动增长的主键(Oracle中没有)</div><div class="line">CREATE TABLE t4(</div><div class="line">    id int PRIMARY KEY AUTO_INCREAMENT,</div><div class="line">    name varchar(100),</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>添加、修改主键的关键字：<strong>MODIFY</strong>、<strong>DROP</strong>、<strong>ADD</strong></p>
</li>
</ul>
</li>
<li><p><strong>域完整性</strong>（<strong>列完整性</strong>）<br>&emsp;&emsp;<strong>域完整性</strong>指的是数据库表中的列（即字段）必须符合某种特定的数据类型或数据格式。换句话说，域完整性限制了数据类型、数据格式以及外键约束，检查约束，默认值定义，非空约束和规则等。</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t5(</div><div class="line">    username <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</div><div class="line">    gender <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    phonenumber <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>引用完整性</strong>（<strong>参照完整性</strong>）<br>&emsp;&emsp;引用完整性保持表之间已定义的关系，并确保键值在所有表中一致。相应地，如果一个键值更改了，那么在整个数据库中，对该键值的引用也要进行一致的修改。<br>&emsp;&emsp;关系数据库中的表之间一般是相关的或相互制约的，外键(<strong>FOREIGN KEY</strong>)用于约束表之间的联系。<br>&emsp;&emsp;多表之间的关系包括：</p>
</li>
</ol>
<ul>
<li>一对多（实际开发中最常见，处理最复杂）</li>
<li>多对多</li>
<li>一对一（实际开发中基本不用）<br>外键的操作包括：<ul>
<li>添加外键约束<br><code>ALTER TABLE tablename ADD [CONSTRAINT 外键名] FOREIGN KEY][id](index_col_name,...) REFERENCES foreign_tablename(index_col_name,...);</code></li>
<li>查看外键<br><code>SHOW CREATE TABLE tablename;</code></li>
<li>删除外键<br><code>ALTER TABLE tablename DROP FOREIGN KEY 外键名;</code></li>
</ul>
</li>
</ul>
<ol>
<li><strong>自定义完整性</strong></li>
</ol>
<p>&emsp;&emsp;相关参考代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">%一对多实例</div><div class="line">CREATE TABLE customers(</div><div class="line">    id int,</div><div class="line">    name varchar(100),</div><div class="line">    address varchar(255),</div><div class="line">    PRIMARY KEY (id)</div><div class="line">);</div><div class="line">CREATE TABLE orders(</div><div class="line">    id int,</div><div class="line">    orderLineNumber varchar(100),</div><div class="line">    price float(8,2),</div><div class="line">    status int,</div><div class="line">    customer_id int,</div><div class="line">    PRIMARY KEY(id),</div><div class="line">    CONSTRAINT customer_id_fk FOREIGN KEY(customer_id) REFERENCES customers(id)</div><div class="line">);#'customer_id_fk'为约束名称，在库中要保持唯一</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#多对多实例</div><div class="line">DROP TABLE IF EXISTS `teachers`;</div><div class="line">CREATE TABLE teachers(</div><div class="line">    id int,</div><div class="line">    name varchar(100),</div><div class="line">    salary float(10,2),</div><div class="line">    PRIMARY KEY(id)</div><div class="line">);</div><div class="line">DROP TABLE IF EXISTS `students`;</div><div class="line">CREATE TABLE students(</div><div class="line">    id int,</div><div class="line">    name varchar(100),</div><div class="line">    grade float(10,2),</div><div class="line">    PRIMARY KEY(id)</div><div class="line">);</div><div class="line">DROP TABLE IF EXISTS `teacher_student`;</div><div class="line">CREATE TABLE teacher_student(</div><div class="line">    t_id int,</div><div class="line">    s_id int,</div><div class="line">    PRIMARY KEY(t_id,s_id),</div><div class="line">    CONSTRAINT teacher_id_fk FOREIGN KEY(t_id) REFERENCES teachers(id),</div><div class="line">    CONSTRAINT student_id_fk FOREIGN KEY(s_id) REFERENCES students(id)</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多对多表关系结构对应的Java类结构设计</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> salary;</div><div class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> grade;</div><div class="line">    <span class="keyword">private</span> List&lt;Student&gt; teachers;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ol>
<li><p>链接查询</p>
<ul>
<li>交叉连接：返回两张表记录的笛卡尔积<br><code>SELECT * FROM table1,table2;</code><br><code>SELECT * FROM table1 CROSS JOIN table2;</code></li>
<li>内连接查询<ul>
<li>使用<code>INNER JOIN</code>,<code>ON</code>实现内连接查询；</li>
<li>直接连接两个或多个表，在<code>FROM</code>之后查询实现内连接查询；</li>
</ul>
</li>
<li><p>外连接查询</p>
<ul>
<li><strong>左外连接查询</strong>：返回符合连接条件的记录，同时返回左表中不满足连接条件的剩余记录;</li>
<li><strong>右外连接查询</strong>：返回符合连接条件的记录，同时返回右表中不满足连接条件的剩余记录;</li>
<li>允许交换左右的前提下，左外连接查询等同于右外连接查询。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%内连接</div><div class="line"><span class="keyword">SELECT</span> 字段名列表 <span class="keyword">FROM</span> table1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.字段名=table2.字段名;</div><div class="line"></div><div class="line">%省略INNER关键字</div><div class="line"><span class="keyword">SELECT</span> 字段名列表 <span class="keyword">FROM</span> table1 <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.字段名=table2.字段名;</div><div class="line"><span class="keyword">SELECT</span> 字段名列表 <span class="keyword">FROM</span> table1,table2 <span class="keyword">WHERE</span> 表<span class="number">1.</span>字段名=表<span class="number">2.</span>字段名</div><div class="line">%外连接</div><div class="line"><span class="keyword">SELECT</span> 字段表 <span class="keyword">FROM</span> table1 <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.字段=table2.字段;</div><div class="line"><span class="keyword">SELECT</span> 字段表 <span class="keyword">FROM</span> table1 <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.字段=table2.字段;</div><div class="line"><span class="keyword">SELECT</span> a.字段<span class="number">1</span>, b.字段<span class="number">1</span> <span class="keyword">FROM</span> table1 <span class="keyword">AS</span> a <span class="keyword">LEFT</span>|<span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.字段=b.字段;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>子查询<br>&emsp;&emsp;<strong>子查询</strong>是将一个查询语句嵌套在另一个查询语句中。内层查询语句的查询结果。可以为外层查询语句提供查询条件。通过子查询，可以实现多个表之间的查询。</p>
</li>
<li>子查询关键字</li>
</ol>
<ul>
<li><code>IN</code>/<code>NOT IN</code></li>
<li><code>EXISTS</code>/<code>NOT EXISTS</code></li>
<li><code>ANY</code></li>
<li><code>ALL</code></li>
<li>比较运算符（<code>=</code>、<code>!=</code>、<code>&gt;=</code>、<code>&lt;=</code>）</li>
</ul>
<h3 id="报表查询-amp-分组统计"><a href="#报表查询-amp-分组统计" class="headerlink" title="报表查询&amp;分组统计"></a>报表查询&amp;分组统计</h3><ol>
<li>分组查询<ul>
<li>语法：<code>SELECT ... [WHERE ...][GROUP BY 字段名][HAVING 分组查询条件][ORDER BY 排序条件]</code></li>
<li><strong>HAVING</strong>和<strong>WHERE</strong>均可实现过滤，但<strong>HAVING</strong>通常跟在<strong>GROUP BY</strong>后，它作用于组。同时，HAVING可使用合计函数，但<strong>WHERE</strong>不能用合计函数。</li>
</ul>
</li>
<li>SQL函数<ul>
<li>合计函数</li>
<li>字符串函数</li>
<li>数学函数</li>
<li>日期和时间函数</li>
<li>信息函数</li>
<li>加密函数</li>
<li>其他函数</li>
</ul>
</li>
</ol>
<h3 id="数据库表备份和恢复"><a href="#数据库表备份和恢复" class="headerlink" title="数据库表备份和恢复"></a>数据库表备份和恢复</h3><ul>
<li>备份：<br><code>mysqldump -h localhost -u root -p dbname&gt;backupDir/backupName.sql</code></li>
<li>恢复<ul>
<li><code>mysql&gt;SOURCE d:/mydb1.sql;</code></li>
<li><code>c:/&gt;mysql -u root -p test&lt;d:/mydb1.sql;</code></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文记录MySQL的相关学习笔记，欢迎指正。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://yaodong.ml/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>pandas学习笔记</title>
    <link href="http://yaodong.ml/python/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yaodong.ml/python/pandas学习笔记.html</id>
    <published>2016-11-02T12:12:28.000Z</published>
    <updated>2016-11-11T07:47:29.648Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;pandas是python环境中基于numpy构建的数据分析、数据处理框架。正是pandas的存在，使得ppython语言在数据分析领域变得强大而高效。<br><a id="more"></a><br>&emsp;&emsp;本博文主要是记录博主学习pandas的相关笔记，大部分学习内容来自于总结<a href="http://pandas.pydata.org/pandas-docs/stable/tutorials.html" target="_blank" rel="external">pandas documenation</a>和《利用Python进行数据分析》的pandas的相关章节。<br>&emsp;&emsp;pandas中的两个主要的数据结构是<strong>Series</strong>和<strong>DataFrame</strong>，对此不做过多的理论介绍，<strong>本博文侧重于记录如何使用pandas</strong>。</p>
<h4 id="导入pandas、numpy、matplotlib包："><a href="#导入pandas、numpy、matplotlib包：" class="headerlink" title="导入pandas、numpy、matplotlib包："></a>导入pandas、numpy、matplotlib包：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</div><div class="line"><span class="keyword">import</span> matplot.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure>
<h4 id="创建Series"><a href="#创建Series" class="headerlink" title="创建Series"></a>创建<strong>Series</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="number">8</span>])</div><div class="line">%<span class="comment">#Series具有index属性和values属性，索引从0开始。创建Series时也可指定index的类型</span></div><div class="line">obj = pd.Series([<span class="number">4</span>,<span class="number">-7</span>,<span class="number">5</span>,<span class="number">3</span>],index=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</div><div class="line">%<span class="comment">#可通过索引值获取Series结构的值：</span></div><div class="line">series[index]</div></pre></td></tr></table></figure>
<h4 id="根据字典创建DataFrame对象："><a href="#根据字典创建DataFrame对象：" class="headerlink" title="根据字典创建DataFrame对象："></a>根据字典创建<strong>DataFrame</strong>对象：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">df2 = pd.DataFrame(</div><div class="line">    &#123; <span class="string">'A'</span> : <span class="number">1.</span>,</div><div class="line">      <span class="string">'B'</span> : pd.Timestamp(<span class="string">'20130102'</span>),</div><div class="line">      <span class="string">'C'</span> : pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</div><div class="line">      <span class="string">'D'</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</div><div class="line">      <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</div><div class="line">      <span class="string">'F'</span> : <span class="string">'foo'</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h4 id="使用pandas创建时间日期戳对象："><a href="#使用pandas创建时间日期戳对象：" class="headerlink" title="使用pandas创建时间日期戳对象："></a>使用pandas创建时间日期戳对象：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">6</span>]: dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</div><div class="line">In [<span class="number">7</span>]: dates</div><div class="line">Out[<span class="number">7</span>]: </div><div class="line">DatetimeIndex([<span class="string">'2013-01-01'</span>, <span class="string">'2013-01-02'</span>, <span class="string">'2013-01-03'</span>, <span class="string">'2013-01-04'</span>,</div><div class="line">               <span class="string">'2013-01-05'</span>, <span class="string">'2013-01-06'</span>],</div><div class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</div><div class="line">In [<span class="number">8</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=list(<span class="string">'ABCD'</span>))</div><div class="line">In [<span class="number">9</span>]: df</div><div class="line">Out[<span class="number">9</span>]: </div><div class="line">                A         B         C         D</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></div></pre></td></tr></table></figure>
<h4 id="对DataFrame对象进行排序"><a href="#对DataFrame对象进行排序" class="headerlink" title="对DataFrame对象进行排序"></a>对DataFrame对象进行排序</h4><p>&emsp;&emsp;根据属性进行排序：<code>sort_index(axis=1,ascending=False)</code>函数<br>&emsp;&emsp;根据某个属性的值进行排序：<code>sort_values(by=&#39;column_name&#39;)</code>函数</p>
<h4 id="获取DataFrame对象的指定行或列"><a href="#获取DataFrame对象的指定行或列" class="headerlink" title="获取DataFrame对象的指定行或列"></a>获取DataFrame对象的指定行或列</h4><p>&emsp;&emsp;df.loc()：根据元素的具体值获取DataFrame对象的行或列<br>&emsp;&emsp;df.iloc()：根据具体数字作为索引来获取DataFrame对象的行或列<br>&emsp;&emsp;df.at()：获取指定的元素<br>&emsp;&emsp;df.iat()：获取指定的元素</p>
<h4 id="pandas处理缺失值"><a href="#pandas处理缺失值" class="headerlink" title="pandas处理缺失值"></a>pandas处理缺失值</h4><p>&emsp;&emsp;df.dropna(how=”any”)：删除DataFrame对象的缺失值<br>&emsp;&emsp;df.fillna(value=5)：用value的值来代替DataFrame对象的缺失值<br>&emsp;&emsp;pd.isnull(df)：判断DataFrame对象的各属性值是否为空</p>
<h4 id="pandas合并、连结DataFrame对象"><a href="#pandas合并、连结DataFrame对象" class="headerlink" title="pandas合并、连结DataFrame对象"></a>pandas合并、连结DataFrame对象</h4><p>&emsp;&emsp;<strong>pd.concat([df1,df2],axis=0 or 1)</strong><br>&emsp;&emsp;<strong>pd.merge()</strong>：类SQL式合并DataFrame对象<br>&emsp;&emsp;<strong>df.append(series, ignore_index=True)</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">77</span>]: left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</div><div class="line">In [<span class="number">78</span>]: right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</div><div class="line">In [<span class="number">79</span>]: left</div><div class="line">Out[<span class="number">79</span>]: </div><div class="line">               key  lval</div><div class="line">            <span class="number">0</span>  foo     <span class="number">1</span></div><div class="line">            <span class="number">1</span>  foo     <span class="number">2</span></div><div class="line">In [<span class="number">80</span>]: right</div><div class="line">Out[<span class="number">80</span>]: </div><div class="line">               key  rval</div><div class="line">            <span class="number">0</span>  foo     <span class="number">4</span></div><div class="line">            <span class="number">1</span>  foo     <span class="number">5</span></div><div class="line">In [<span class="number">81</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line">Out[<span class="number">81</span>]: </div><div class="line">               key  lval  rval</div><div class="line">            <span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></div><div class="line">            <span class="number">1</span>  foo     <span class="number">1</span>     <span class="number">5</span></div><div class="line">            <span class="number">2</span>  foo     <span class="number">2</span>     <span class="number">4</span></div><div class="line">            <span class="number">3</span>  foo     <span class="number">2</span>     <span class="number">5</span></div></pre></td></tr></table></figure>
<h4 id="pandas的DataFrame对象的相关属性"><a href="#pandas的DataFrame对象的相关属性" class="headerlink" title="pandas的DataFrame对象的相关属性"></a><strong>pandas的DataFrame对象的相关属性</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">df2.A                  df2.boxplot</div><div class="line">df2.abs                df2.C</div><div class="line">df2.add                df2.clip</div><div class="line">df2.add_prefix         df2.clip_lower</div><div class="line">df2.add_suffix         df2.clip_upper</div><div class="line">df2.align              df2.columns</div><div class="line">df2.all                df2.combine</div><div class="line">df2.any                df2.combineAdd</div><div class="line">df2.append             df2.combine_first</div><div class="line">df2.apply              df2.combineMult</div><div class="line">df2.applymap           df2.compound</div><div class="line">df2.as_blocks          df2.consolidate</div><div class="line">df2.asfreq             df2.convert_objects</div><div class="line">df2.as_matrix          df2.copy</div><div class="line">df2.astype             df2.corr</div><div class="line">df2.at                 df2.corrwith</div><div class="line">df2.at_time            df2.count</div><div class="line">df2.axes               df2.cov</div><div class="line">df2.B                  df2.cummax</div><div class="line">df2.between_time       df2.cummin</div><div class="line">df2.bfill              df2.cumprod</div><div class="line">df2.blocks             df2.cumsum</div><div class="line">df2.bool               df2.D</div></pre></td></tr></table></figure>
<h4 id="pandas的相关函数："><a href="#pandas的相关函数：" class="headerlink" title="pandas的相关函数："></a>pandas的相关函数：</h4><p>&emsp;&emsp;<strong>pd.Tiimestamp()</strong>：把字符串转化为日期时间戳对象<br>&emsp;&emsp;<strong>np.array()</strong>：创建numpy的ndarray对象<br>&emsp;&emsp;<strong>df.dtypes</strong>：查看DataFrame对象的每个属性的数据类型<br>&emsp;&emsp;<strong>df.head()</strong>：查看DataFrame对象头部的若干条记录<br>&emsp;&emsp;<strong>df.tail()</strong>：查看DataFrame对象尾部的若干条记录<br>&emsp;&emsp;<strong>df.columns</strong>：获取DataFrame对象的属性名字<br>&emsp;&emsp;<strong>df.index</strong>：获取DataFrame对象的索引值<br>&emsp;&emsp;<strong>df.values</strong>：获取DataFrame对象属性值<br>&emsp;&emsp;<strong>df.describe()</strong>：获取DataFrame对象的相关信息<br>&emsp;&emsp;<strong>df.copy()</strong>：显性复制DataFrame对象<br>&emsp;&emsp;<strong>series.shift()</strong>：对Series对象的数据循环移动n位<br>&emsp;&emsp;<strong>df.apply(</strong>lambda function<strong>)</strong>：对DataFrame对象应用函数<br>&emsp;&emsp;<strong>series.value_counts()</strong>：统计Series对象的每个取值的频数<br>&emsp;&emsp;<strong>series.str.lower()</strong>：把字符转化为小写<br>&emsp;&emsp;<strong>df.groupby(column_name).sum()</strong>：以group的形式统计相关信息<br>&emsp;&emsp;stacked = df.stack()：<br>&emsp;&emsp;stacked.unstack()</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;pandas是python环境中基于numpy构建的数据分析、数据处理框架。正是pandas的存在，使得ppython语言在数据分析领域变得强大而高效。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yaodong.ml/tags/python/"/>
    
      <category term="pandas" scheme="http://yaodong.ml/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Window下python的Xgboost框架安装教程</title>
    <link href="http://yaodong.ml/articles/Window%E4%B8%8Bpython%E7%9A%84Xgboost%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html"/>
    <id>http://yaodong.ml/articles/Window下python的Xgboost框架安装教程.html</id>
    <published>2016-10-14T11:43:42.000Z</published>
    <updated>2016-11-23T07:34:17.985Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<a href="http://xgboost.readthedocs.io/en/latest/" target="_blank" rel="external">Xgboost</a>是<a href="http://homes.cs.washington.edu/~tqchen/" target="_blank" rel="external">Tianqi Chen</a>大神实现的一个boost算法框架。在Kaggle比赛的很多题目中都大放异彩，Xgboost诞生之后获奖无数，是个值得强力推荐的机器学习实战框架。<br><a id="more"></a><br>&emsp;&emsp;本博文记录了在Windows平台下的Anaconda中安装Xgboost。Window平台对机器学习、深度学习的最新成果的支持与Linux/Ubuntu的差距简直不要太大，安装过程中也踩了不少坑。本博文特将Xgboost的安装过程作简单整理，希望对大家能够有所帮助。<br>&emsp;&emsp;果冻君的电脑配置环境是：</p>
<ul>
<li>操作系统：Window 8.1 <strong>64</strong>位</li>
<li>已经安装了<strong>git</strong>和<strong>Anaconda2</strong>，<strong>git</strong>和<strong>Anaconda2</strong>就不多说了，学习的两大利器，强力推荐！</li>
</ul>
<hr>
<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol>
<li><p>在用户文件夹下建立code文件夹</p>
</li>
<li><p>进入code文件夹，使用git将xgboost克隆到本地</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/code</div><div class="line">git clone --recursive https://github.com/dmlc/xgboost</div></pre></td></tr></table></figure>
</li>
<li><p>进入xgboost文件夹，输入下面的两条指令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout 9a48a40 %为了解决在源码编译时出现问题</div><div class="line">git submodule init</div><div class="line">git submodule update</div></pre></td></tr></table></figure>
</li>
<li><p>window下安装Xgboost需要对源码进行编译，编译工具一定要使用Mingw64。去<a href="http://mingw-w64.org/doku.php" target="_blank" rel="external">官网</a>下载Mingw64。<code>MinGW-w64 - for 32 and 64 bit Windows</code>的下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/" target="_blank" rel="external">Download mingw-w64-install.exe</a>。这里需要注意，<strong>安装mingw64的5.3.0或4.9.x版本，不要安装最新的6.1.0和6.2.0版本，否则会编译不成功</strong>！！！，如图说示：<br><img src="/images/mingw64-5.3.0.png" alt="mingw64-5.3.0"></p>
</li>
<li>mingw64安装成功后，一会儿要用到<code>mingw32-make.exe</code>编译Xgboost的源码，因此需要将<code>mingw32-make.exe</code>的路径加入到环境变量<code>PATH</code>中：<code>C:\Program Files\mingw-w64\x86_64-5.3.0-posix-seh-rt_v5-rev0\mingw64\bin</code>。重启Git Bash窗口，输入<code>which mingw32-make</code>，如果输出<code>mingw32-make</code>的安装路径，则说明环境变量配置成功。</li>
<li><p>在Git Bash窗口输入以下指令，使用<code>mingw32-make</code>编译Xgboost的几个子模块。注意当输入的指令完全执行完后再输入下一条指令</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ alias make=&apos;mingw32-make&apos;</div><div class="line">$ cd dmlc-core</div><div class="line">$ make -j4</div><div class="line">$ cd ../rabit</div><div class="line">$ make lib/librabit_empty.a -j4</div><div class="line">$ cd ..</div><div class="line">$ cp make/mingw64.mk config.mk</div><div class="line">$ make -j4</div></pre></td></tr></table></figure>
</li>
<li><p>打开<code>Anaconda prompt</code>窗口，进入xgboost/python-package路径，执行以下指令；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Anaconda2] cd C:\Users\username\code\xgboost\python-package </div><div class="line">[Anaconda2] python setup.py install</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Xgboost</strong>到这里已经安装成功了，不过此时若在python程序中<code>import xgboost as xgb</code>时，会出现Error。因此还需要把<code>mingw64</code>的路径加入到环境变量的Path中：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">mingw_path = <span class="string">'C:\\Program Files\\mingw-w64\\x86_64-5.3.0-posix-seh-rt_v4-rev0\\mingw64\\bin'</span></div><div class="line">os.environ[<span class="string">'PATH'</span>] = mingw_path + <span class="string">';'</span> + os.environ[<span class="string">'PATH'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>尝试在python程序中输入<code>import xgboost as xgb</code>，如果没有报错，则说明我们的Xgboost安装成功啦！Enjoy it~~~</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;http://xgboost.readthedocs.io/en/latest/&quot;&gt;Xgboost&lt;/a&gt;是&lt;a href=&quot;http://homes.cs.washington.edu/~tqchen/&quot;&gt;Tianqi Chen&lt;/a&gt;大神实现的一个boost算法框架。在Kaggle比赛的很多题目中都大放异彩，Xgboost诞生之后获奖无数，是个值得强力推荐的机器学习实战框架。&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yaodong.ml/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="Xgboost" scheme="http://yaodong.ml/tags/Xgboost/"/>
    
      <category term="python" scheme="http://yaodong.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning学习笔记：特征工程</title>
    <link href="http://yaodong.ml/machine-learning/Machine%20Learning%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B.html"/>
    <id>http://yaodong.ml/machine-learning/Machine Learning算法笔记——特征工程.html</id>
    <published>2016-10-10T08:48:47.000Z</published>
    <updated>2016-11-11T07:46:22.395Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<strong>特征工程（Feature Engineering）</strong>包括特征构建(<strong>Construction</strong>)、特征提取(<strong>Extraction</strong>)、特征选择(<strong>Selection</strong>)三个部分。本博文简单记录了特征工程的相关知识和实战应用经验。<br><a id="more"></a></p>
<blockquote>
<p><strong>Feature engineering</strong> is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning<br><strong>特征工程</strong>是利用数据科学领域的相关知识来创建、提取、选择能使机器学习算法达到最佳性能的特征的过程。</p>
</blockquote>
<h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>&emsp;&emsp;特征选择，即从特征集合中挑选一组最具统计意义的特征子集，以提高机器学习算法的性能表现，并达到数据降维的效果。通常需要衡量单独每个特征与类别标签之间的相关性。实际机器学习应用中，表示单个特征与类别标签之间相关关系的参数指标有：<strong>皮尔逊相关系数</strong>、<strong>信息增益</strong>、<strong>信息增益比</strong>和<strong>基尼指数</strong>等。</p>
<h4 id="皮尔逊相关系数"><a href="#皮尔逊相关系数" class="headerlink" title="皮尔逊相关系数"></a>皮尔逊相关系数</h4><p>&emsp;&emsp;两个变量（特征与标签向量）之间的pearson相关系数定义为两个变量之间的协方差和标准差的商。计算公式为：</p>
<script type="math/tex; mode=display">\gamma^2_{xy}=\dfrac{cov(x,y)}{\sigma_x\sigma_y}=\dfrac{E[(X-\mu_x)(Y-\mu_y)]}{\sigma_x\sigma_y}</script><p>&emsp;&emsp;这里的$x$表示某个特征的观测值，$Y$表示类别标签。pearson相关系数的取值在0到1之间。</p>
<h4 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h4><p>&emsp;&emsp;信息增益的概念来源于信息科学的分支。<strong>熵</strong>（entropy）是随机变量不确定性的度量。熵越大，表示随机变量的不确定性就越大。<br>设随机变量X为有限个值的离散随机变量，其概率分布为</p>
<script type="math/tex; mode=display">P(X=x_i)=p_i</script><p>&emsp;&emsp;熵的定义为</p>
<script type="math/tex; mode=display">H(X)=-\sum_{i=1}^np_ilog(p_i)</script><p>&emsp;&emsp;条件熵：H(Y|X)表示已知随机变量X的条件下随机变量Y的不确定性，定义<script type="math/tex">H(Y|X)=\sum_{i=1}^np_iH(Y|X=x_i)</script><br>&emsp;&emsp;其中$p_i=P(X=x_i)$。这里X表示样本数据集的某个特征，即表示根据某个特征划分后，数据Y的熵。如果某个特征有更强的分类能力，则条件熵$H(Y|X)$越小，表示不确定性越小。</p>
<h4 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h4><p>&emsp;&emsp;信息增益定义为特征A对训练数据集D的信息增益 $g(D,A)$ 定义为集合D的经验熵 $H(D)$ 与特征A在给定条件下D的经验条件熵$H(D|A)$之差，即<script type="math/tex">g(D,A)=H(D)-H(D|A)</script><br> &emsp;&emsp;信息增益$g(D,A)$表示特征A使得对数据集D的分裂的不确定性减少的程度。所以信息增益越大，表明不确定性减小越多，即特征具有更强的分类能力。<br>&emsp;&emsp;根据信息增益准则的特征选择方法是：对训练数据集（或其子集）D,计算每个特征的信息增益，并比较其大小将其排序，选择最大的信息增益对应的特征。</p>
<h4 id="信息增益比"><a href="#信息增益比" class="headerlink" title="信息增益比"></a>信息增益比</h4><p>&emsp;&emsp;信息增益比也是度量特征分类能力的方法。特征A对训练数据集D的信息增益比$g_R(D,A)$定义为其信息增益与训练数据集D关于特征A的熵之比，即</p>
<script type="math/tex; mode=display">g_R(D,A)=\frac{g(D,A)}{H_A(D)}</script><p>&emsp;&emsp;其中</p>
<script type="math/tex; mode=display">H_A(D)=-\sum_{i=1}^n\frac{|D_i|}{|D|}log_2\frac{|D_i|}{|D|}</script><p>&emsp;&emsp;$|D|$表示训练样本集D中样本数量，$|D_i|$表示训练数据D中特征A取第i个值的总数目。信息增益比越大，表明特征分类能力越强。<br>&emsp;&emsp;需要注意的是，<strong>以信息增益作为划分训练数据集的特征，存在偏向于选择取值较多的特征的问题</strong>。</p>
<h4 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h4><p>&emsp;&emsp;基尼指数表示样本集合的不确定性程度，基尼指数越小，对应的特征分类能力越强。</p>
<h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>&emsp;&emsp;原则上讲，特征提取应该在特征选择之前。特征提取的对象是未经处理的原始数据（raw data），它的目的是自动地构建新的特征，将原始数据转换为一组具有明显物理现实意义或者统计意义或核的特征。实际的机器学习应用中，常见的特征提取的方法有：</p>
<ul>
<li><strong>PCA</strong>（Principal Component Analysis，主成分分析）</li>
<li><strong>ICA</strong> （Independent component analysis，独立成分分析）</li>
<li><strong>LDA</strong> （Linear Discriminant Analysis，线性判别分析）</li>
</ul>
<h3 id="特征构建"><a href="#特征构建" class="headerlink" title="特征构建"></a>特征构建</h3><p>&emsp;&emsp;特征构建指的是结合所研究问题的实际背景从原始数据中人工构建新的特征。这一步需要花大量的时间和精力去研究真实的数据，思考问题的潜在形式和数据结构，同时能够更好地应用到预测模型中。<br>&emsp;&emsp;特征构建需要很强的洞察力和分析能力，从原始数据中找出具有物理意义的特征，并将其处理成一个或一组新的特征，便于应用到机器学习算法模型中。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>&emsp;&emsp;特征工程包括特征提取、特征构建和特征选择这三个子问题。在实际的机器学习应用中，每一个步骤都很重要。将这三个子问题的重要性排序为：<script type="math/tex">特征构建>特征提取>特征选择</script><br>如果特征构建做的不好，则会直接影响特征提取，进而影响了特征选择，最终影响机器学习算法模型的性能表现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;特征工程（Feature Engineering）&lt;/strong&gt;包括特征构建(&lt;strong&gt;Construction&lt;/strong&gt;)、特征提取(&lt;strong&gt;Extraction&lt;/strong&gt;)、特征选择(&lt;strong&gt;Selection&lt;/strong&gt;)三个部分。本博文简单记录了特征工程的相关知识和实战应用经验。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yaodong.ml/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Machine Learning" scheme="http://yaodong.ml/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning学习笔记：判别模型与生成模型</title>
    <link href="http://yaodong.ml/machine-learning/Machine%20Learning%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B.html"/>
    <id>http://yaodong.ml/machine-learning/Machine Learning算法笔记——判别模型与生成模型.html</id>
    <published>2016-10-08T10:43:52.000Z</published>
    <updated>2016-11-11T07:46:05.474Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文简单介绍了判别模型与生成模型的定义、优缺点以及相互之间的关系。<br><a id="more"></a></p>
<h3 id="生成模型和判别模型的定义"><a href="#生成模型和判别模型的定义" class="headerlink" title="生成模型和判别模型的定义"></a>生成模型和判别模型的定义</h3><p>&emsp;&emsp;监督学习的任务就是从数据中学习一个模型（也叫分类器），对给定的输入<strong>X</strong>预测相应的输出<strong>Y</strong>。决策函数为<strong>Y=<em>f</em>(X)</strong>或者条件概率分布<strong>P(Y|X)</strong>。实际上通过条件概率分布<strong>P(Y|X)</strong>进行预测也是隐含着表达成决策函数<strong>Y=<em>f</em>(X)</strong>的形式的。<br>&emsp;&emsp;监督学习方法分为<strong>生成方法</strong>（Generative approach）和<strong>判别方法</strong>（Discriminative approach），相应的机器学习模型分别称为<strong>生成模型</strong>（Generative Model）和<strong>判别模型</strong>（Discriminative Model）：</p>
<ul>
<li><strong>判别模型</strong>：由数据直接学习决策函数Y=f(X)或者条件概率分布P(Y|X)作为预测的模型，即判别模型。<strong>基本思想</strong>是有限样本条件下建立判别函数，不考虑样本的产生模型，直接研究预测模型。典型的判别模型包括<strong>k近邻</strong>，<strong>感知级</strong>，<strong>决策树</strong>，<strong>支持向量机</strong>等。</li>
<li><strong>生成模型</strong>：由数据学习联合概率密度分布<strong>P(X,Y)</strong>，然后求出条件概率分布<strong>P(Y|X)</strong>作为预测的模型，即生成模型：<strong>P(Y|X)= P(X,Y)/ P(X)</strong>。基本思想是首先建立样本的联合概率概率密度模型<strong>P(X,Y)</strong>，然后再得到后验概率<strong>P(Y|X)</strong>，再利用它进行分类。注意是先求<strong>P(X,Y)</strong>才得到<strong>P(Y|X)</strong>的，这个过程还要先求出<strong>P(X)</strong>。<strong>P(X)</strong>就是你的训练样本数据的概率分布。当数据样本非常多时，得到的<strong>P(X)</strong>才能很好的描述你数据真正的分布。典型的生成模型有：<strong>朴素贝叶斯</strong>和<strong>隐马尔科夫模型</strong>等。<h3 id="生成模型和判别模型的优缺点"><a href="#生成模型和判别模型的优缺点" class="headerlink" title="生成模型和判别模型的优缺点"></a>生成模型和判别模型的优缺点</h3>&emsp;&emsp;<strong>生成模型</strong>的特点：</li>
</ul>
<ul>
<li>生成方法学习联合概率密度分布<strong>P(X,Y)</strong>，所以可以从统计学的角度表示数据的分布情况，能够反映同类数据本身的相似度，但它不关心到底划分各类的分类边界在哪；生成方法可以还原出联合概率分布P(Y|X)，而判别方法不能；</li>
<li>生成方法的学习收敛速度更快，即当样本容量增加的时候，学习模型可以更快的收敛于真实模型，当存在隐变量时，仍可以用生成方法学习。此时判别方法就不能用。</li>
</ul>
<p>&emsp;&emsp;<strong>判别模型</strong>的特点：</p>
<ul>
<li>判别模型直接学习决策函数<strong>Y=<em>f</em>(X)</strong>或者条件概率分布<strong>P(Y|X)</strong>，因此不能反映训练数据本身的特性；</li>
<li>但它寻找不同类别之间的最优分类面，反映的是异类数据之间的差异。</li>
<li>直接面对预测，往往学习的准确率更高。</li>
<li>由于直接学习<strong>P(Y|X)</strong>或<strong>P(X)</strong>，可以对数据进行各种程度上的抽象、定义特征并使用特征，因此可以简化学习问题。</li>
</ul>
<h3 id="生成模型和判别模型的联系"><a href="#生成模型和判别模型的联系" class="headerlink" title="生成模型和判别模型的联系"></a>生成模型和判别模型的联系</h3><p>&emsp;&emsp;<strong>由生成模型可以得到判别模型，但由判别模型得不到生成模型</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文简单介绍了判别模型与生成模型的定义、优缺点以及相互之间的关系。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yaodong.ml/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记——树和二叉树</title>
    <link href="http://yaodong.ml/algorithms/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
    <id>http://yaodong.ml/algorithms/算法学习笔记——树和二叉树.html</id>
    <published>2016-10-03T05:13:10.000Z</published>
    <updated>2017-03-14T06:57:30.064Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文总结了树和二叉树的基本概念，简单介绍了二叉树的遍历。<br><a id="more"></a></p>
<h3 id="树与二叉树的相关概念"><a href="#树与二叉树的相关概念" class="headerlink" title="树与二叉树的相关概念"></a>树与二叉树的相关概念</h3><p>&emsp;&emsp;二叉树的左右子树有严格的顺序，不可颠倒，这是二叉树与普通树的关键区别。<br>&emsp;&emsp;<strong>二叉搜索树</strong>：二叉树的一个节点的左子节点的关键字值小于这个节点，右子节点的关键字值大于（或等于）这个父节点。<br>&emsp;&emsp;<strong>平衡树与非平衡树</strong>：左子节点与左子节点对称的树为平衡树，否则就是非平衡树。<br>&emsp;&emsp;<strong>满二叉树</strong>：满二叉树除最后一层无任何子节点外，其余每一层的所有结点都有两个子结点。也就是说，除叶子结点外的所有结点均有两个子结点。满二叉树的结点数达到最大值。<strong>满二叉树的所有叶子结点必须在同一层上</strong>。<br>&emsp;&emsp;<strong>完全二叉树</strong>：完全二叉树是由满二叉树而引出来的。对于深度为<strong>K</strong>的，有<strong>N</strong>个结点的二叉树，当且仅当其编号为<strong><em>i</em></strong>的结点与深度为<strong>K</strong>的满二叉树中编号为<strong><em>i</em></strong>的结点在二叉树中的位置一一对应时称之为完全二叉树。<br>&emsp;&emsp;<strong>霍夫曼树</strong>：一种特殊结构的二叉树，每个节点要么没有子节点，要么有两个子节点。<br>&emsp;&emsp;二叉树结合了有序数组和链表的优点：在二叉树中，数据的查找效率跟在有序数组中查找一样高，同时插入、删除数据的效率和在链表中一样高。<br>&emsp;&emsp;二叉树的工作效率：时间复杂度为<strong>O(logN)</strong>。总的来说，树对所有的数据存储操作都很高效。<br>&emsp;&emsp;满二叉树的相关性质：</p>
<ul>
<li>叶子结点只能出现在深度最大的一层；</li>
<li>非叶子结点的度一定为2；</li>
<li>在同等深度的二叉树中，满二叉树的结点个数最多，叶子结点也最多；</li>
</ul>
<p>&emsp;&emsp;完全二叉树的相关性质：</p>
<ul>
<li>叶子结点只能出现在最下的两层；</li>
<li>最下层的叶子结点一定集中在左部连续位置；</li>
<li>倒数第二层如有叶子结点存在，则一定都在右部连续位置；</li>
<li>如果某结点的度为1，则该结点一定只有左孩子，不可能存在只有右孩子的情况；</li>
<li>对于同样结点数的二叉树，完全二叉树的深度最小。</li>
<li>完全二叉树除最后一层外，每一层上的结点数均达到最大值；在最后一层上只缺少右子树的若干结点。</li>
</ul>
<p>&emsp;&emsp;<strong>满二叉树与完全二叉树的重要区别</strong>：<strong>满二叉树肯定是完全二叉树，完全二叉树不一定是满二叉树。</strong></p>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>&emsp;&emsp;1. 在二叉树的第<strong>i</strong>层最多有$2^{i}-1$个结点（$i$）；<br>&emsp;&emsp;2. 深度为<strong>k</strong>的二叉树至多有个结点；<br>&emsp;&emsp;3. 对任何一棵二叉树T，如果其终端结点数为$n<em>0$，度为<strong>2</strong>的结点数为$n_2$，则$n_0=n_2+1$；<br>&emsp;&emsp;4. 具有<strong>n</strong>个结点的完全二叉树的深度为$\lfloor log</em>{2} n \rfloor+1$<br>&emsp;&emsp;5. 如果对一棵有<strong>n</strong>个结点的完全二叉树（其深度为$\lfloor log_{2} n \rfloor+1$）的结点按层序编号，对任一结点$i$都有：</p>
<ul>
<li>如果$i=1$，则结点$i$是二叉树的根结点，无双亲；如果$i&gt;1$，则其双亲是结点$\lfloor i/2 \rfloor$;</li>
<li>如果$2i&gt;n$，则结点$i$无左孩子，结点$i$为叶子结点，否则其左孩子是结点$2i$；</li>
<li>如果$2i+1&gt;n$，则结点$i$无右孩子，否则其右孩子是结点$2i+1$。</li>
</ul>
<h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p>&emsp;&emsp;二叉树常用的存储结构是：<strong>孩子兄弟表示法</strong>和<strong>二叉链表</strong>。</p>
<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h4 id="前序遍历：根-左-右"><a href="#前序遍历：根-左-右" class="headerlink" title="前序遍历：根 左 右"></a><strong>前序遍历</strong>：根 左 右</h4><ol>
<li>递归遍历（较简单）</li>
<li>非递归遍历（借助<strong>Stack</strong>结构实现）：</li>
</ol>
<ul>
<li>当访问到任一结点<strong>p</strong>：输出结点<strong>p</strong>，并将该结点入栈；</li>
<li>判断结点<strong>p</strong>的左孩子是否为空：<ol>
<li>若不为空，并将<strong>p</strong>的左孩子置为当前结点，回到1，循环；</li>
<li>若为空，则对栈顶结点进行出栈操作，但不输出，并将待出栈结点的右孩子置为当前结点，判断是否为空：<pre><code> 1. 若不为空，回到1，循环操作；
 2. 若为空，则对栈顶结点进行出栈操作，但不输出，即重复上述操作
</code></pre></li>
</ol>
</li>
<li>直到栈为空且当前结点为空，则遍历结束<h4 id="中序遍历：左-根-右"><a href="#中序遍历：左-根-右" class="headerlink" title="中序遍历：左 根 右"></a><strong>中序遍历</strong>：左 根 右</h4></li>
<li>递归遍历（较简单）</li>
<li>非递归遍历（借助<strong>Stack</strong>结构实现）：</li>
</ul>
<ol>
<li>对任一结点<strong>p</strong>，若<strong>p</strong>的左孩子结点不为空，则将<strong>p</strong>入栈并将<strong>p</strong>的左孩子结点置为当前结点，一直对当前结点做相同处理；</li>
<li>若当前结点<strong>p</strong>左孩子为空，则输出结点<strong>p</strong>，然后将<strong>p</strong>的右孩子置为当前结点，并判断其是否为空：<ul>
<li>(1)：若不为空，重复1,2操作</li>
<li>(2)：若为空，则执行出栈操作，输出栈顶结点，并将栈顶结点的右孩子结点置为当前结点，并判断是否为空；重复(1), (2)操作；</li>
</ul>
</li>
<li>直至当前结点<strong>p</strong>为<code>NULL</code>且栈为空，遍历结束；<h4 id="后序遍历：左-右-根"><a href="#后序遍历：左-右-根" class="headerlink" title="后序遍历：左 右 根"></a><strong>后序遍历</strong>：左 右 根</h4></li>
</ol>
<ul>
<li>递归遍历（较简单）</li>
<li>非递归遍历（借助<strong>Stack</strong>结构实现）,后序遍历的非递归的实现相对来说要难一些，因为<strong>后序遍历要保证根节点在左子树和右子树被访问后才能访问</strong>，思路如下：<ul>
<li><strong>思路1</strong>：核心思想是将暂时不访问的右、左孩子结点依次入栈</li>
</ul>
</li>
</ul>
<ol>
<li>对于任意结点<strong>p</strong>，先将<strong>p</strong>入栈；</li>
<li>若P不存在左孩子和右孩子，或者P存在左孩子或右孩子，但左右孩子已经被输出，则可以直接输出结点P，并将其出栈，将出栈结点P标记为上一个输出的结点，再将此时的栈顶结点设为当前结点；</li>
<li>若不满足2中的条件，则将<strong>p</strong>的右孩子和左孩子依次入栈（先右后左），当前节点重新置为栈顶结点，重复步骤2；</li>
<li>直至栈空，遍历结束。<ul>
<li><strong>思路2</strong>：<ol>
<li>对于任一结点<strong>current</strong>，当结点<strong>current</strong>非空时，将其右孩子结点入栈，然后<strong>current</strong>入栈，设置<strong>current</strong>的左孩子为<strong>current</strong>然后沿左子树一直深度搜索，一直down到最左孩子结点，</li>
<li>设置栈顶元素为<strong>current</strong>，并将其出栈，判断该出栈结点的右孩子是否为空：<ul>
<li>若<strong>current</strong>的右孩子不为空，栈不为空且右孩子是栈顶结点，则再将栈顶结点出栈（<strong>current</strong>的右孩子结点）， 设置<code>current=current.right</code></li>
<li>如果出栈结点的右孩子为空，则可以访问该结点，并且设置<strong>current=null</strong></li>
</ul>
</li>
<li>重复步骤2直至栈为空(null)，遍历结束。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="层序遍历：从上到下，从左到右"><a href="#层序遍历：从上到下，从左到右" class="headerlink" title="层序遍历：从上到下，从左到右"></a><strong>层序遍历</strong>：从上到下，从左到右</h4><ul>
<li>递归结构</li>
<li>层序遍历的非递归结构可借助队列Queue来实现：</li>
</ul>
<ol>
<li>将根结点入队；</li>
<li>如果队列不空，则进入以下循环：<ul>
<li>将队首的结点出队，并输出该结点；</li>
<li>如果该结点有左孩子，则将其左孩子入队；</li>
<li>如果该结点有右孩子吗，则将其右孩子入队。</li>
</ul>
</li>
</ol>
<hr>
<p>&emsp;&emsp;霍夫曼树以及其他二叉树的知识后续会在博文下次更新时整理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文总结了树和二叉树的基本概念，简单介绍了二叉树的遍历。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yaodong.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yaodong.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning学习笔记：决策树与随机森林</title>
    <link href="http://yaodong.ml/machine-learning/Machine%20Learning%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97.html"/>
    <id>http://yaodong.ml/machine-learning/Machine Learning算法笔记——决策树与随机森林.html</id>
    <published>2016-10-03T04:54:14.000Z</published>
    <updated>2016-11-18T03:05:10.006Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本博文介绍了机器学习中经典的随机森林算法和决策树算法。<br><a id="more"></a></p>
<h2 id="决策树-Decision-Tree"><a href="#决策树-Decision-Tree" class="headerlink" title="决策树(Decision Tree)"></a>决策树(Decision Tree)</h2><p>&emsp;&emsp;决策树是一种基本的分类与回归算法，属于<strong>贪婪算法</strong>，其模型呈现为树形结构，可理解为基于特征或模型属性对实例进行分类或回归的过程<br>&emsp;&emsp;决策树的特点：</p>
<ul>
<li><strong>优点</strong>：计算复杂度不高，输出结果可直观理解数据，对中间值得缺失不敏感，可以处理不相关特征数据</li>
<li><strong>缺点</strong>：可能会出现Over Fittting</li>
<li>适用数据类型：数值型和标称型</li>
</ul>
<p>&emsp;&emsp;决策树的路径及其对应的<code>if-then</code>重要性质：路径之间是互斥且完备的。也就是说，每一个实例都被决策树的一条路径覆盖，且只能被一条路径或者一条规则覆盖。这里的覆盖是指实例的特征与路径上的特征或实例满足规则的条件</p>
<h3 id="决策树模型"><a href="#决策树模型" class="headerlink" title="决策树模型"></a>决策树模型</h3><p>&emsp;&emsp;决策树模型学习过程可分为3个步骤：<strong>特征选择</strong>，<strong>决策树的生成</strong>，<strong>决策树的修剪</strong></p>
<h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><p>&emsp;&emsp;构建决策树，实质是对训练数据集进行超平面划分，不同的样本特征在划分数据集时重要性不同，因此选择特征顺序的不同将会生成不同的决策树。为使数据集的分类结果更纯净，更能直观表达数据的本质属性，构造决策树之前先评估不同特征的重要性。</p>
<h3 id="决策树生成算法"><a href="#决策树生成算法" class="headerlink" title="决策树生成算法"></a>决策树生成算法</h3><p>&emsp;&emsp;<strong>ID3</strong>与<strong>C4.5</strong>都是决策树的经典分类决策树算法。<strong>ID3</strong>算法与<strong>C4.5</strong>算法的不同之处在于ID3算法采用信息增益作为特征选择准则，而C4.5采用的是信息增益比作为准则</p>
<h4 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h4><p>&emsp;&emsp;<strong>ID3</strong>算法的核心是在决策树的各个节点上应用信息增益准则选择特征，递归地构建决策树。<br>&emsp;&emsp;<strong>ID3</strong>算法的实质是用最大似然法进行概率模型的选择。算法思路为：</p>
<ul>
<li>从根节点开始，对结点计算所有可能的特征的信息增益，选择信息增益最大的特征作为结点的特征，由该特征的不同取值建立子节点</li>
<li>再对子结点递归调用以上方法，构建决策树。直到所有特征的信息增益均很小或没有特征可以选择为止。</li>
</ul>
<h4 id="C4-5算法"><a href="#C4-5算法" class="headerlink" title="C4.5算法"></a>C4.5算法</h4><p>&emsp;&emsp;<strong>ID3</strong>算法由于只有树的生成，所以该算法生成的树容易产生过拟合。<strong>C4.5</strong>算法对<strong>ID3</strong>算法进行了改进，选用信息增益比作为特征选择准则。</p>
<h3 id="决策树的剪枝"><a href="#决策树的剪枝" class="headerlink" title="决策树的剪枝"></a>决策树的剪枝</h3><p>&emsp;&emsp;用决策树生成算法递归产生决策树，容易出现过拟合，原因在于决策树的生成过程过多考虑如何提高对训练数据的正确分类，从而构建的决策树趋于复杂<br>&emsp;&emsp;在决策树学习中，将已生成的树进行简化的过程称为剪枝，具体来说就是剪掉一些子树或叶子结点，并将其根节点或父结点作为新的叶子结点，进而简化决策树模型<br>&emsp;&emsp;决策树的剪枝通过极小化决策树整体的损失函数（代价函数）来实现，即<script type="math/tex">C_\alpha(T)=C(T)+\alpha|T|</script></p>
<h4 id="CART算法"><a href="#CART算法" class="headerlink" title="CART算法"></a>CART算法</h4><p>&emsp;&emsp;<strong>CART</strong>算法是一种既可以用于分类也可用作回归的决策树算法。<strong>CART</strong>算法分为以下两步：</p>
<ol>
<li>决策树生成：基于训练数据集生成决策树，生成的决策树要尽量大</li>
<li>决策树剪枝：用验证数据集对已生成的树进行剪枝并选择最优子树，此过程中，用损失函数最小化作为剪枝的标准</li>
</ol>
<hr>
<h2 id="随机森林算法"><a href="#随机森林算法" class="headerlink" title="随机森林算法"></a>随机森林算法</h2><h3 id="Bagging方法"><a href="#Bagging方法" class="headerlink" title="Bagging方法"></a>Bagging方法</h3><p>&emsp;&emsp;Bagging方法就是将所有training data放进一个“黑色”的bag中，然后从这个bag中随机抽取部分数据生成新的训练集。随机森林算法中，样本训练集本省可以使用bagging方法，同样，样本的feature也可以进行bagging。从随机性来看，bagging技术可以有效的减小方差，即减小过拟合程度<br>&emsp;&emsp;随机森林是一种经典而强大的机器学习算法，具有回归和分类的功能。随机森林算法由若干决策树组成，这些决策树一般采用随机的方法生成，因此也叫做随机决策树。随机森林算法中的各决策树之间是没有关联的。</p>
<p>&emsp;&emsp;随机森林算法的<strong>特点</strong>：</p>
<ul>
<li>适合用于多分类问题，算法训练和预测速度快，容易实现并行化</li>
<li>可有效估计缺失数据，即有一定程度的数据容错能力，当数据集中有大比例的数据缺失时仍然可以保持精度不变和能够有效地处理大的数据集</li>
<li>不会出现过拟合</li>
<li>能够处理很高维度（feature很多）的数据，并且不用做特征选择</li>
<li>对数据集的适应能力强：既能处理离散型数据，也能处理连续型数据，数据集无需规范化</li>
<li>可检测样本的各特征（维度）之间的相互影响程度，判断特征对所解决问题的重要性程度</li>
<li>可直接处理大规模的的变量（群）</li>
<li>在创建森林即分类的过程中，对泛化误差的估计是内部无偏估计</li>
<li>随机森林算法也是一种数据降维的方法，用于处理缺失值、异常值</li>
</ul>
<h3 id="Bootstrap抽样"><a href="#Bootstrap抽样" class="headerlink" title="Bootstrap抽样"></a>Bootstrap抽样</h3><p>&emsp;&emsp;随机森林算法中包含了对输入数据的重复自抽样过程，即所谓的bootstrap抽样。大约三分之一的数据集将用于测试而不是模型的训练，这样的数据被称为out of bag samples。</p>
<p>&emsp;&emsp;bootstrap抽样与bagging的区别是：在生成每棵树的时候，每个节点变量都仅仅在随机选出的少数变量中产生。因此，不但样本是随机的，连每个节点变量（Features）的产生都是随机的。<br>&emsp;&emsp;综上可知，随机森林算法的的两个随机采样的过程保证了随机性，所以即使对最终的各决策树不剪枝，也不会出现over-fitting。</p>
<h3 id="随机森林算法的具体步骤："><a href="#随机森林算法的具体步骤：" class="headerlink" title="随机森林算法的具体步骤："></a>随机森林算法的具体步骤：</h3><ol>
<li>通过自助法（bootstrap）重采样技术，从原始训练样本集中有放回地重复随机抽取N个样本生成新的训练样本集合</li>
<li>对随机采样得到的新训练数据集，构建决策树，在每个节点执行以下操作：</li>
</ol>
<ul>
<li>从样本数据的M个features中随机选取m($m&lt;&lt;M$)个feature</li>
<li>对这m个features，选择特定的度量准则分割节点</li>
<li>重复上述操作N次，从而生成与样本数量相等的决策树</li>
</ul>
<ol>
<li>对于每一个测试样例，对k颗决策树的预测结果进行投票。票数最多的结果就是随机森林的分裂（预测）结果</li>
</ol>
<h3 id="scikit-learn中的Random-Forest算法"><a href="#scikit-learn中的Random-Forest算法" class="headerlink" title="scikit-learn中的Random Forest算法"></a>scikit-learn中的Random Forest算法</h3><p>参考代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sklearn.ensemble.RandomForestClassfier</div><div class="line">clf = RandomForestClassifier([parameters]) <span class="comment">#generator the entity object of classifier</span></div><div class="line">parameters:</div><div class="line">n_estimators：指定随机森林中树的数目，越多越好，不超过内存即可</div><div class="line">criterion:指定在分裂使用的决策算法，取值有“entropy”、“gini”等</div><div class="line">max_features:单个决策树使用特征的最大数量，取值为<span class="string">"Auto"</span>，<span class="string">"None"</span>，<span class="string">"sqrt"</span>，<span class="string">"0.X"</span>。回归问题，max_features=n_features,分类问题，max_features=sqrt(n_features),<span class="string">"sqrt"</span>即为全部特征数目的平均根</div><div class="line">max_depth:默认为<span class="keyword">None</span>，一般可不改动</div><div class="line">min_simples_split:</div><div class="line">min_samples_leaf:最小叶片大小。默认值为<span class="number">1</span>，可设置为<span class="number">50</span>。叶是决策树的末端节点，较小的叶子使模型更容易捕捉训练数据中的噪声。</div><div class="line">min_weight_fraction_leaf:</div><div class="line">max_leaf_nodes:</div><div class="line">min_impurity_split:</div><div class="line">bootstrap:</div><div class="line">oob_score:这是一个随机森林交叉验证方法，取值为boolean类型，<span class="string">"True"</span>,<span class="string">"False"</span></div><div class="line">n_jobs:指定并行训练时使用的进程数。“<span class="number">-1</span>”表示使用所有处理器</div><div class="line">random_state:经验值<span class="string">"random_state=50"</span></div><div class="line">verbose:</div><div class="line">warm_state:</div><div class="line">class_weight:</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本博文介绍了机器学习中经典的随机森林算法和决策树算法。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yaodong.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yaodong.ml/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
